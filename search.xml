<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>On the Robustness of Code Generation Techniques:An Empirical Study on GitHub Copilot</title>
      <link href="/posts/98da000b/"/>
      <url>/posts/98da000b/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>背景：我们在让大模型帮我们生成代码的时候，不同的需求描述对于模型生成的代码影响有多大。换个描述很可能会生成完全不同的结果。</p><p>研究目的：对于代码生成模型（以Github Copilot为例），不同但语义等效的自然语言描述是否会产生相同的推荐功能（代码）。</p><p>测试方法：892个Java methods来自1401个开源项目，将方法上方的注释作为输入给模型</p><p>生成释义的自动化工具：PEGASUS and TP</p><p>原始释义-一组语义等效的释义描述（使用PEGASUS and TP生成）</p><p>解释一下自动释义技术</p><ul><li><p>PEGASUS</p></li><li><p>TP</p></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>问题：</p><ul><li>RQ0:自动释义技术可以在多大程度上用于测试基于深度学习的代码生成器的鲁棒性？</li><li>RQ1:GitHub Copilot 的输出在多大程度上受到开发人员作为输入提供的代码描述的影响？</li></ul><p>&lt;method,code_description&gt;</p><p>892个方法：<br><img src="/../../img/Pasted%20image%2020231008222237.png"><br>TP：只生成792个有效释义，其中非等效占比<br>PEGASUS：生成891个有效释义，其中非等效占比<br>手工：认为全部有效，且等效892</p><p>一共：792+891+892&#x3D;2575   原始释义892 共2575+892&#x3D;3467，两个上下文场景* 2&#x3D;6934次调用</p><h1 id="研究结果"><a href="#研究结果" class="headerlink" title="研究结果"></a>研究结果</h1><p>RQ0:</p><p>RQ1:</p><h1 id="局限性："><a href="#局限性：" class="headerlink" title="局限性："></a>局限性：</h1><ul><li>通过测试未必意味着生成代码的正确，使用CodeBLEU和编辑距离</li><li>自动化模拟脚本不能够完全代替模型对于开发者的帮助，开发人员也许会参考模型生成的结果后，灵活变通。</li><li>在判断语义等效性时，作者的主观性</li><li>892个数据集中可能部分已经被用于训练copilot，导致结果的不准确</li><li>仅考虑了Java语言</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>46%情况下，不同但语义相同的描述会导致生成代码的不同。</li><li>目前代码生成模型效果一般，仅有13%的生成代码能够通过测试，但作者说了（一部分原因是选取的待生成方法比较复杂，见图，圈复杂度等）</li><li>要让模型输出正确的代码，必须使用语义等效的描述之一（不好把控，评价指标没说）</li><li>提高开发者对代码的描述准确性</li><li>对DWF来说，如果内嵌AI助手，更需要用户能够准确的提供他们的需求&#x2F;描述以获得期望的结果。</li><li>最佳实践：可以尝试输入给模型多种不同但意思相近的描述，对比生成的结果，选最佳的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型 </tag>
            
            <tag> #论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lang Chain介绍</title>
      <link href="/posts/887510fe/"/>
      <url>/posts/887510fe/</url>
      
        <content type="html"><![CDATA[<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>JS版：<a href="https://github.com/langchain-ai/langchainjs">langchain-ai&#x2F;langchainjs (github.com)</a><br>Python版：<a href="https://github.com/langchain-ai/langchain">langchain-ai&#x2F;langchain: ⚡ Building applications with LLMs through composability ⚡ (github.com)</a></p><p>论文链接：<br><a href="https://arxiv.org/pdf/2205.10583.pdf">Automated Repair of Programs from Large Language Models</a><br><a href="https://arxiv.org/pdf/2210.14179.pdf">Practical Program Repair in the Era of Large Pre-trained Language Models</a><br><a href="https://arxiv.org/pdf/2302.06144v2.pdf">SKCODER: A Sketch-based Approach for Automatic Code Generation</a><br><a href="https://arxiv.org/pdf/2302.03482.pdf">Keeping Pace with Ever-Increasing Data: Towards Continual Learning of Code Intelligence Models</a><br><a href="https://arxiv.org/pdf/2302.05020.pdf">Impact of Code Language Models on Automated Program Repair</a><br>[An Empirical Study of Pre-Trained Model Reuse in the Hugging Face Deep Learning Model Registry](<a href="https://arxiv.org/pdf/2303.02552.pdf">https://arxiv.org/pdf/2303.02552.pdf</a><br><a href="https://arxiv.org/pdf/2302.04030.pdf">CrossCodeBench: Benchmarking Cross-Task Generalization of Source Code Models</a><br><a href="https://arxiv.org/pdf/2302.00438.pdf">On the Robustness of Code Generation Techniques: An Empirical Study on GitHub Copilot</a></p><p>Use case：<br><a href="https://python.langchain.com/docs/use_cases/code_understanding">Code understanding | 🦜️🔗 Langchain</a><br><a href="https://python.langchain.com/docs/use_cases/extraction">Extraction | 🦜️🔗 Langchain</a><br><a href="https://python.langchain.com/docs/use_cases/qa_structured/sql">SQL | 🦜️🔗 Langchain</a></p><p><a href="https://github.com/chatchat-space/Langchain-Chatchat">chatchat-space&#x2F;Langchain-Chatchat: Langchain-Chatchat（原Langchain-ChatGLM）基于 Langchain 与 ChatGLM 等语言模型的本地知识库问答 | Langchain-Chatchat (formerly langchain-ChatGLM), local knowledge based LLM (like ChatGLM) QA app with langchain (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.824</title>
      <link href="/posts/1906f3d9/"/>
      <url>/posts/1906f3d9/</url>
      
        <content type="html"><![CDATA[<p><img src="/../../../img/Pasted%20image%2020231009101529.png"></p><h1 id="Lecture01-Introduce"><a href="#Lecture01-Introduce" class="headerlink" title="Lecture01 - Introduce"></a>Lecture01 - Introduce</h1><h2 id="MapReduce论文"><a href="#MapReduce论文" class="headerlink" title="MapReduce论文"></a>MapReduce论文</h2><p><img src="/../../../img/Pasted%20image%2020230929130402.png"></p><p>过程：</p><ul><li>将用户输入的文件分成<code>M块</code>，每块大小为16MB-64MB（可由用户指定）。</li><li>由Master节点分配工作给其他Worker节点，包括<code>M个map任务</code>和<code>R个reduce任务</code>。</li><li>被分配了map任务的节点解析数据，生成&lt;key,value&gt;然后放入<code>内存缓冲区</code>。</li><li>被缓冲的键值对周期性地写入磁盘，然后被划分为<code>R个块（Hash(key) mod R）</code>，他们在磁盘上的位置被发送给Master,然后Master转发给Worker节点进行reduce任务。</li><li>当节点收到master关于这些位置的通知时，他会使用RPC读取磁盘中的数据，当读取完所有中间数据时，进行<code>排序</code>操作来保证相同的键组合在一起。</li><li>Reduce函数对已排序的中间数据进行迭代，其输出附加到Reduce分区的output文件中。</li><li>当<code>M个map</code>和<code>R个reduce</code>任务运行完毕后，返回至用户代码，整个过程结束。</li></ul><p>数据结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Task:</span><br><span class="line">taskId:</span><br><span class="line">type:map/reduce</span><br><span class="line">state:idle/in-progress/completed</span><br><span class="line">machineId:</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Lab-1-MapReduce"><a href="#Lab-1-MapReduce" class="headerlink" title="Lab 1 - MapReduce"></a>Lab 1 - MapReduce</h1><h1 id="Lecture02-Infrastructure-RPC-and-threads"><a href="#Lecture02-Infrastructure-RPC-and-threads" class="headerlink" title="Lecture02 - Infrastructure: RPC and threads"></a>Lecture02 - Infrastructure: RPC and threads</h1><p>Why Go?</p><ul><li>强大的多线程</li><li>便捷的RPC</li><li>类型安全</li><li>内存安全（垃圾回收机制）</li><li>简单</li></ul><p>Why threads?</p><ul><li>并发在分布式系统中的必要性</li><li>利用CPU的多核性能</li><li>便利性</li><li>I&#x2F;O并发</li></ul><p>挑战性：</p><ul><li>共享数据：加锁（sync.Mutex或避免共享可变数据）</li><li>线程之间的协调</li><li>死锁：锁机制或通信</li></ul><p>Go语言并发编程<br><a href="https://blog.csdn.net/weixin_45765795/article/details/121185893">【并发编程】WaitGroup 基本用法和如何实现以及常见错误-CSDN博客</a></p><h1 id="Lecture03-GFS"><a href="#Lecture03-GFS" class="headerlink" title="Lecture03 - GFS"></a>Lecture03 - GFS</h1><h2 id="GFS论文"><a href="#GFS论文" class="headerlink" title="GFS论文"></a>GFS论文</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>用于大型分布式数据密集型应用的可伸缩分布式文件系统。</p><ul><li>组件的失败和错误是非常常见的。因此持续的监控，错误检测，容错和自动恢复是必须的</li><li>文件通常是巨大的，需要重新设计I&#x2F;O操作和块大小。</li><li>文件访问模式，顺序访问。需要优化追加写入和原子性。</li><li>放宽一致性和原子追加操作</li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p><img src="/../../../img/Pasted%20image%2020231009195026.png"></p><ul><li>一个GFS集群由一个master和多个分块服务器（chunkserver）组成</li><li>文件以固定大小的块存储，块由全局唯一的64位ID标识，默认情况下每个区块具有三个副本。</li><li>master存储所有文件的元信息，包括名称空间、访问控制信息、文件到块的映射以及块的当前位置。</li><li>master定期使用心跳信息与块交流，提供指令和收集状态。</li><li>链接到每个应用程序中的GFS客户端代码实现文件系统API，并与主服务器和分块服务器通信，以代表应用程序读取或写入数据。</li><li>客户端和分块服务器不缓存文件数据。</li><li>客户端会询问master该和哪个分块服务器交互，然后直接与分块服务器读取和写入数据。</li></ul><p>交互过程：</p><ol><li>客户端通过指定的文件名和字节偏移量转化为<code>(file name,chunk index)</code>，并发送给master。</li><li>master回复相应的区块句柄和区块位置。</li><li>客户端在一定时间内缓存<code>(file name,chunk index)</code>，一便后续使用</li><li>客户端向其中的一个副本（距离最近优先）发送<code>(chunk handle,byte range)</code>请求。</li><li>在缓存有效期内，对同一块的访问不需重复请求master。</li></ol><p>master存储的元信息（位于master的内存中）：</p><ul><li>文件和块命名空间</li><li>文件到块映射信息</li><li>每个块副本的位置信息</li></ul><p>前两种还会以操作日志并保存到远程计算机上来避免master发生崩溃和不一致。每个块的信息则不会持久存储。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 微服务和分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程硕士数学</title>
      <link href="/posts/806cd970/"/>
      <url>/posts/806cd970/</url>
      
        <content type="html"><![CDATA[<h1 id="1-引论"><a href="#1-引论" class="headerlink" title="1.引论"></a>1.引论</h1><h1 id="2-线性代数方程组的直接解法"><a href="#2-线性代数方程组的直接解法" class="headerlink" title="2.线性代数方程组的直接解法"></a>2.线性代数方程组的直接解法</h1><h2 id="2-2Gauss消去法"><a href="#2-2Gauss消去法" class="headerlink" title="2.2Gauss消去法"></a>2.2Gauss消去法</h2><h1 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h1><p><img src="/../../img/Pasted%20image%2020231010081042.png"></p><p>矩阵范数<br><img src="/../../img/Pasted%20image%2020231010081226.png"></p><p><img src="/../../img/Pasted%20image%2020231010081741.png"></p><p>谱半径是其对应矩阵的特征值中最大的特征值绝对值</p><p><img src="/../../img/Pasted%20image%2020231010082408.png"></p><p><img src="/../../img/Pasted%20image%2020231010082441.png"></p><p><img src="/../../img/Pasted%20image%2020231010084154.png"></p><p>如何证明：<br>1）A的某一行和该行对应的代数余子式相乘在相加后结果为该行列式的值<br>2）A的某一行和另一行元素的代数余子式相乘在相加后结果为0（相当于两行相同的行列式展开）</p><p><img src="/../../img/Pasted%20image%2020231010084740.png"></p><p><img src="/../../img/Pasted%20image%2020231010084923.png"></p><p><a href="https://zhuanlan.zhihu.com/p/387907406">线性方程组-迭代法 0.1：范数与谱半径 - 知乎 (zhihu.com)</a></p><p><img src="/../../img/Pasted%20image%2020231010091617.png"><br><img src="/../../img/Pasted%20image%2020231010091631.png"></p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github+Obsidian搭建个人博客平台</title>
      <link href="/posts/26e99575/"/>
      <url>/posts/26e99575/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于本地使用obsidian对笔记进行编辑和分类时，多端同步繁琐，无法在线查看。因此选用Hexo博客框架+Github建站，搭建一个自己的个人博客页面，同时通过配置Obsidian,使得在本地也可以使用Obsidian进行管理和笔记的编辑。</p></blockquote><blockquote><p>(其实是羡慕别人炫酷的个人博客×)😄😄</p></blockquote><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>博客链接：<a href="https://leggasai.github.io/">LegGasai’s CSLearning</a></p><h1 id="一-新建Github仓库"><a href="#一-新建Github仓库" class="headerlink" title="一.新建Github仓库"></a>一.新建Github仓库</h1><h2 id="1-创建同名仓库"><a href="#1-创建同名仓库" class="headerlink" title="1.创建同名仓库"></a>1.创建同名仓库</h2><blockquote><p>注意图中<code>Repository name</code>必须为<code>Owner.github.io</code>，这样github才能正确识别为<strong>github pages</strong><br><img src="/../../img/Pasted%20image%2020230924160911.png"></p></blockquote><h1 id="二-创建Hexo项目"><a href="#二-创建Hexo项目" class="headerlink" title="二.创建Hexo项目"></a>二.创建Hexo项目</h1><blockquote><p>Hexo是一个<strong>快速、简洁且高效的博客框架</strong>，且开源社区提供了大量的第三方主题样式，可一键生成华丽的个人博客网页。官网链接<a href="https://hexo.io/zh-cn/">Hexo</a></p></blockquote><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h2><blockquote><p>确保已经安装了如下工具</p></blockquote><ul><li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>Git</li></ul><p>然后通过npm安装Hexo脚手架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><p>安装完成后，建站（创建Hexo项目）,将<code>&lt;folder&gt;</code>替换成你的文件夹名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.  </span><br><span class="line">├── _config.yml  </span><br><span class="line">├── package.json  </span><br><span class="line">├── scaffolds  </span><br><span class="line">├── source  </span><br><span class="line">|   ├── _drafts  </span><br><span class="line">|   └── _posts  </span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><blockquote><p>之后主要会用到_config.yml文件和source文件夹</p></blockquote><h2 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h2><p>修改_config.yml中的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site  </span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&lt;your</span> <span class="string">blog</span> <span class="string">name&gt;</span>  </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>  </span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span>  </span><br><span class="line"><span class="attr">keywords:</span>  </span><br><span class="line"><span class="attr">author:</span> <span class="string">&lt;your</span> <span class="string">name&gt;</span> </span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#改成中文  </span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>各参数说明如下</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。支持多个关键词。</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://leggasai.github.io/</span></span><br></pre></td></tr></table></figure><p>其他配置可以先不用改，后续配置Hexo主题的时候再对应修改</p><h1 id="三-配置Hexo主题-Butterfly为例"><a href="#三-配置Hexo主题-Butterfly为例" class="headerlink" title="三.配置Hexo主题(Butterfly为例)"></a>三.配置Hexo主题(Butterfly为例)</h1><blockquote><p>由于默认的主题比较简陋，好在社区提供了大量的现成的Hexo主题框架供我们选择，网页链接：<a href="https://hexo.io/themes/">Themes | Hexo</a></p></blockquote><h2 id="1-选择主题"><a href="#1-选择主题" class="headerlink" title="1.选择主题"></a>1.选择主题</h2><p>我们可以根据自己的需要和审美，选择一款自己喜爱的主题，这边笔者选择的是比较热门的一款Butterfly主题。<br><img src="/../../img/Pasted%20image%2020230924163004.png"></p><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2.安装和配置"></a>2.安装和配置</h2><blockquote><p>选择主题后，我们需要找到该主题的官方文档，来进行配置。例如Butterfly的参考文档如下：</p></blockquote><ul><li>github链接：<a href="https://github.com/jerryc127/hexo-theme-butterfly">🦋 A Hexo Theme: Butterfly (github.com)</a></li><li>使用文档：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></li></ul><p>首先安装主题,在你的<code>Hexo根目录</code>下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>然后应用主题，修改<code>Hexo根目录下的/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions  </span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/  </span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/  </span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>接着安装必要的渲染器插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做）。</p><p>在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。( 注意: 复制的是主题的 _config.yml ，而不是 hexo 的 _config.yml)<br><img src="/../../img/Pasted%20image%2020230924163827.png"></p><blockquote><p>Hexo会自动合并主题中的<code>_config.yml</code> 和<code>_config.butterfly.yml</code> 里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先度较高。</p></blockquote><p>然后根据官方文档和自己需求，进行页面的定制即可，参考文档如下：</p><ul><li><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安裝文檔(三) 主題配置-1 | Butterfly</a></li><li><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></li></ul><h1 id="四-配置Obsidian"><a href="#四-配置Obsidian" class="headerlink" title="四.配置Obsidian"></a>四.配置Obsidian</h1><blockquote><p>为了获得在本地管理和组织所有笔记的良好体验，推荐本地使用Obsidian进行编辑。但Obsidian和Hexo需要一些额外的配置。</p></blockquote><p>首先用Obsidian打开Hexo的根目录<br><img src="/../../img/Pasted%20image%2020230924170303.png"></p><p>修改.gitignore文件，忽略产生的.obsidian配置信息。修改如下，主要是添加了最后一行<code>.obsidian/workspace</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store  </span><br><span class="line">Thumbs.db  </span><br><span class="line">db.json  </span><br><span class="line">*.log  </span><br><span class="line">node_modules/  </span><br><span class="line">public/  </span><br><span class="line">.deploy*/  </span><br><span class="line">_multiconfig.yml  </span><br><span class="line">.obsidian/workspace</span><br></pre></td></tr></table></figure><h2 id="修改obsidian配置"><a href="#修改obsidian配置" class="headerlink" title="修改obsidian配置"></a>修改obsidian配置</h2><p><img src="/../../img/Pasted%20image%2020230924170444.png"></p><ul><li>修改新建笔记存放的位置，因为Hexo默认是放在<code>source/_posts</code>文件夹下的，所以需要修改与之保持一致。</li><li>关闭Wiki链接，Hexo不支持，如果不关闭在本地obsidian是有效果的，部署至网站后，图片和文件会加载不出。</li><li>修改附件默认存放位置，在<code>source</code>文件夹下可以新建一个img或其他名字的文件夹，用于存放笔记中的图片，文件，视频等</li><li>添加忽略文件，将Hexo项目除source文件夹外其他文件夹排除。</li></ul><h2 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h2><blockquote><p>obsidian可以自定义模板信息，通过模板快速创建Hexo的front-matter信息</p></blockquote><p><img src="/../../img/Pasted%20image%2020230924170933.png"></p><p>在<code>source/_obsidian</code>文件夹下新建template.md文件，内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---  </span><br><span class="line">title: &#123;&#123;title&#125;&#125;  </span><br><span class="line">date: &#123;&#123;date&#125;&#125;  </span><br><span class="line"><span class="section">tags: []  </span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>之后使用obsidian添加新笔记时，只需要引入该模版即可。</p><h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><h3 id="自动生成categories"><a href="#自动生成categories" class="headerlink" title="自动生成categories"></a>自动生成categories</h3><blockquote><p>在本地使用Obsidian时，我们常常会用笔记的路径(如前端&#x2F;Vue)来代表其<code>categories(分类)</code>，但在Hexo中需要在front-matter中手动定义<code>categories</code>,如果我们不想每次都手动配置，而是让Hexo自动以笔记的路径来定义其<code>categories</code>。</p></blockquote><p>添加<code>hexo-auto-category</code>依赖，根据文件目录自动生成 categories 信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-auto-category --save</span><br></pre></td></tr></table></figure><p>在根目录下的<code>_config.yml</code>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generate categories from directory-tree  </span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/xu-song/hexo-auto-category  </span></span><br><span class="line"><span class="comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0  </span></span><br><span class="line"><span class="attr">auto_category:</span>  </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">depth:</span></span><br></pre></td></tr></table></figure><h3 id="生成唯一静态链接"><a href="#生成唯一静态链接" class="headerlink" title="生成唯一静态链接"></a>生成唯一静态链接</h3><blockquote><p>默认的笔记链接是根据笔记的时间+标题生成的，但如果我们修改了笔记的时间，那么如果别的文章中引用了这篇笔记，就会失效。</p></blockquote><p>添加<code>hexo-abbrlink</code>依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>在根目录下的<code>_config.yml</code>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="comment"># abbrlink config  </span></span><br><span class="line"><span class="comment"># https://github.com/rozbo/hexo-abbrlink  </span></span><br><span class="line"><span class="attr">abbrlink:</span>  </span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32  </span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span></span><br></pre></td></tr></table></figure><h3 id="Obsidian文件树插件"><a href="#Obsidian文件树插件" class="headerlink" title="Obsidian文件树插件"></a>Obsidian文件树插件</h3><blockquote><p>由于直接用Obsidian打开Hexo项目，目录树会显示很多无关紧要的目录，在Obsidian中我们只需要关注<code>source/_post</code>这个文件夹即可。</p></blockquote><p>在Obsidian第三方插件中安装<code>File Tree Alternative Plugin</code>插件<br><img src="/../../img/Pasted%20image%2020230924172412.png"><br>文件夹聚焦效果：<br><img src="/../../img/Pasted%20image%2020230924172457.png"></p><h1 id="五-配置一键部署"><a href="#五-配置一键部署" class="headerlink" title="五.配置一键部署"></a>五.配置一键部署</h1><blockquote><p>配置一键部署功能，可以实现本地博客编写完毕后，一键同步到github上，并同步响应的个人主页。参考文档如下：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">部署 | Hexo</a></p></blockquote><p>安装hexo-deployer-git插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>然后修改根目录下的<code>_config.yml</code>文件（注意不是主题配置文件）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment  </span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment  </span></span><br><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;your</span> <span class="string">repo</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&lt;branch</span> <span class="string">name&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxx/xxxx.github.io.git</span>  </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认</th></tr></thead><tbody><tr><td><code>repo</code></td><td>库（Repository）地址</td><td>建议使用<code>git@github.com</code>形式的</td></tr><tr><td><code>branch</code></td><td>分支名称</td><td><code>gh-pages</code> (GitHub)  <br><code>coding-pages</code> (Coding.net)  <br><code>master</code> (others)</td></tr><tr><td><code>message</code></td><td>自定义提交信息</td><td><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr><tr><td><code>token</code></td><td>可选的令牌值，用于认证 repo。用 <code>$</code> 作为前缀从而从环境变量中读取令牌</td><td></td></tr></tbody></table><p>然后执行指令,如果提示需要验证github帐号和密码，则可以配置SSH密钥认证，方式在这就不赘述了，自行百度即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean;</span><br><span class="line">hexo deploy;</span><br></pre></td></tr></table></figure><h1 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1><blockquote><p>总得来说，按照Hexo和Butterfly文档进行配置，笔者自己遇到的问题并不多，如果读者在配置中，遇到问题的欢迎留言评论~</p></blockquote><h2 id="1-配置评论功能"><a href="#1-配置评论功能" class="headerlink" title="1.配置评论功能"></a>1.配置评论功能</h2><blockquote><p>网上大多都是使用Valine管理评论的，因为其无需后端，但是自从2022年起，其不支持国内用户使用了。因此换用了Waline+Vercel构建评论功能。</p></blockquote><p>参考文档如下：<a href="https://waline.js.org/guide/get-started/#leancloud-%E8%AE%BE%E7%BD%AE-%E6%95%B0%E6%8D%AE%E5%BA%93">快速上手 | Waline</a></p><blockquote><p>但Vercel的节点，国内无法访问，因此要使用评论功能，只能通过<code>特殊手段</code>，除非自己购买了域名。</p></blockquote><h2 id="2-配置一键部署"><a href="#2-配置一键部署" class="headerlink" title="2.配置一键部署"></a>2.配置一键部署</h2><blockquote><p>笔者自己通过hexo d部署到github时，经常出现timeout out的情况（也有部分是网络原因），后来发现是因为仓库链接写的是https的形式，改成<code>git@github.com</code>形式的情况就好很多。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment  </span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment  </span></span><br><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span>  </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h2 id="3-标签页-分类页-关于我页面缺失"><a href="#3-标签页-分类页-关于我页面缺失" class="headerlink" title="3.标签页&#x2F;分类页&#x2F;关于我页面缺失"></a>3.标签页&#x2F;分类页&#x2F;关于我页面缺失</h2><p>也就是图中的这些，其中archives是创建Hexo框架时已经有的，不需要自己手动配置，而标签，分类，友链，关于界面是需要手动配置的。<br><img src="/../../img/Pasted%20image%2020230924164601.png"></p><p>其配置的具体方式如下：<a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔(二) 主題頁面 | Butterfly</a></p><p>进入项目根目录，输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>然后在source&#x2F;tags文件夹下会新建一个index.md文件，进入该文件，进行如下修改：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2023-01-05 00:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">orderby: random</span><br><span class="line"><span class="section">order: 1</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>然后重新执行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean;</span><br><span class="line">hexo g;</span><br><span class="line">hexo s;</span><br></pre></td></tr></table></figure><p>其余页面的配置也类似。</p><p>友链页的配置请参考：<a href="https://butterfly.js.org/posts/dc584b87/#%E5%8F%8B%E6%83%85%E9%8F%88%E6%8E%A5">Butterfly 安裝文檔(二) 主題頁面 | Butterfly</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城笔记</title>
      <link href="/posts/dd2fb3f1/"/>
      <url>/posts/dd2fb3f1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1.初始化项目"></a>1.初始化项目</h1><h2 id="idea新建空项目"><a href="#idea新建空项目" class="headerlink" title="idea新建空项目"></a>idea新建空项目</h2><h2 id="添加各个模块"><a href="#添加各个模块" class="headerlink" title="添加各个模块"></a>添加各个模块</h2><blockquote><p>gulimall-product商品服务<br><img src="/../../../../img/Pasted%20image%2020230920094421.png"><br>gulimall-ware仓储服务<br><img src="/../../../../img/Pasted%20image%2020230920094917.png"><br>gulimall-order订单服务<br><img src="/../../../../img/Pasted%20image%2020230920095048.png"><br>同理创建<br>gulimall-coupon优惠券服务<br>gulimall-member会员服务<br>同时添加springboot web依赖和springcloud-routing openfeign依赖</p></blockquote><h2 id="聚合模块"><a href="#聚合模块" class="headerlink" title="聚合模块"></a>聚合模块</h2><blockquote><p>在根目录下添加pom文件，添加下列代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leggasai.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>聚合服务<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-ware<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-member<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-product<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-coupon<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>将pom文件加入maven,刷新maven</p></blockquote><h2 id="更改-gitignore文件"><a href="#更改-gitignore文件" class="headerlink" title="更改.gitignore文件"></a>更改.gitignore文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">HELP.md  </span><br><span class="line">target/  </span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar  </span><br><span class="line">!**/src/main/**/target/  </span><br><span class="line">!**/src/test/**/target/  </span><br><span class="line">  </span><br><span class="line">### STS ###  </span><br><span class="line">.apt_generated  </span><br><span class="line">.classpath  </span><br><span class="line">.factorypath  </span><br><span class="line">.project  </span><br><span class="line">.settings  </span><br><span class="line">.springBeans  </span><br><span class="line">.sts4-cache  </span><br><span class="line">  </span><br><span class="line">### IntelliJ IDEA ###  </span><br><span class="line">.idea  </span><br><span class="line">*.iws  </span><br><span class="line">*.iml  </span><br><span class="line">*.ipr  </span><br><span class="line">  </span><br><span class="line">### NetBeans ###  </span><br><span class="line">/nbproject/private/  </span><br><span class="line">/nbbuild/  </span><br><span class="line">/dist/  </span><br><span class="line">/nbdist/  </span><br><span class="line">/.nb-gradle/  </span><br><span class="line">build/  </span><br><span class="line">!**/src/main/**/build/  </span><br><span class="line">!**/src/test/**/build/  </span><br><span class="line">  </span><br><span class="line">### VS Code ###  </span><br><span class="line">.vscode/  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">**/mvnw  </span><br><span class="line">**/mvnw.cmd  </span><br><span class="line">  </span><br><span class="line">**/.mvn  </span><br><span class="line">**/target/  </span><br><span class="line">  </span><br><span class="line">**/.gitignore</span><br></pre></td></tr></table></figure><h1 id="2-数据库设计"><a href="#2-数据库设计" class="headerlink" title="2.数据库设计"></a>2.数据库设计</h1><blockquote><p>数据库分为 订单数据库、用户数据库、库存数据库、商品数据库、优惠数据库<br><a href="../../../../img/gmall_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.pdm">gmall_数据库设计.pdm</a></p></blockquote><h2 id="订单数据库表"><a href="#订单数据库表" class="headerlink" title="订单数据库表"></a>订单数据库表</h2><blockquote><p>包含了订单信息，退货信息，订单项等<br><a href="../../../../img/gulimall_oms.sql">gulimall_oms.sql</a></p></blockquote><h2 id="用户数据库表"><a href="#用户数据库表" class="headerlink" title="用户数据库表"></a>用户数据库表</h2><blockquote><p>包含了用户信息，会员积分，用户收藏，收货地址等<br><a href="../../../../img/gulimall_ums.sql">gulimall_ums.sql</a></p></blockquote><h2 id="库存数据库表"><a href="#库存数据库表" class="headerlink" title="库存数据库表"></a>库存数据库表</h2><blockquote><p>包含库存工作单，采购单，库存表等<br><a href="../../../../img/gulimall_wms.sql">gulimall_wms.sql</a></p></blockquote><h2 id="商品数据库表"><a href="#商品数据库表" class="headerlink" title="商品数据库表"></a>商品数据库表</h2><blockquote><p>包含SPU表，SKU表，商品分类表，商品评价表，属性表等<br><a href="../../../../img/gulimall_pms.sql">gulimall_pms.sql</a></p></blockquote><h2 id="优惠数据库表"><a href="#优惠数据库表" class="headerlink" title="优惠数据库表"></a>优惠数据库表</h2><blockquote><p>包含优惠券信息，积分表，秒杀信息等，商品优惠信息等<br><a href="../../../../img/gulimall_sms.sql">gulimall_sms.sql</a></p></blockquote><h1 id="3-快速开发代码生成"><a href="#3-快速开发代码生成" class="headerlink" title="3.快速开发代码生成"></a>3.快速开发代码生成</h1><blockquote><p>主要使用人人开源的renren-generator、renren-fast、renren-fast-vue</p></blockquote><h2 id="引入必要的依赖"><a href="#引入必要的依赖" class="headerlink" title="引入必要的依赖"></a>引入必要的依赖</h2><h2 id="创建公共模块"><a href="#创建公共模块" class="headerlink" title="创建公共模块"></a>创建公共模块</h2><p>创建common模块，在其pom文件中添加一些公共的依赖,如mysql-connector-java,mybatis等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leggasai.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>公共类<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">httpcore.version</span>&gt;</span>4.4.12<span class="tag">&lt;/<span class="name">httpcore.version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-lang.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-lang.version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-java.version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">mysql-connector-java.version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-api.version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">servlet-api.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpcore.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他模块在其pom文件中引入common模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leggasai.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Mybatis-Plus"><a href="#配置Mybatis-Plus" class="headerlink" title="配置Mybatis-Plus"></a>配置Mybatis-Plus</h2><p>官方链接：<a href="https://baomidou.com/pages/24112f/">简介 | MyBatis-Plus (baomidou.com)</a></p><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h3><p>在commom模块的pom中添加mybatis-plus的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>在各个模块的application.yml中添加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">datasource:</span>  </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.241.128:3306/gulimall_pms</span>  </span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="配置Mybatis-Plus-1"><a href="#配置Mybatis-Plus-1" class="headerlink" title="配置Mybatis-Plus"></a>配置Mybatis-Plus</h4><p>在各个模块的application.yml中添加如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span>  </span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span>  </span><br><span class="line">  <span class="attr">global-config:</span>  </span><br><span class="line">    <span class="attr">db-config:</span>  </span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h1 id="4-分布式组件"><a href="#4-分布式组件" class="headerlink" title="4.分布式组件"></a>4.分布式组件</h1><p><img src="/../../../../img/B$16F60L4QJGAUJ_JG%5DLEAV.png"></p><ul><li><strong>Nacos</strong>：注册中心（服务发现&#x2F;注册）</li><li><strong>Nacos</strong>：配置中心（动态配置管理）</li><li>Ribbon：负载均衡</li><li>Feign：声明式HTTP客户端，RPC</li><li>Sentinel：服务容错（服务限流、服务降级、服务熔断）</li><li>Gateway：API网关</li><li>Sleuth：调用链监控</li><li>Seata：分布式事务解决方案</li></ul><p>在common模块中引入Spring-cloud-Alibaba依赖<br><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">版本说明 · alibaba&#x2F;spring-cloud-alibaba Wiki (github.com)</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependencyManagement&gt;</span>  </span><br><span class="line">    <span class="string">&lt;dependencies&gt;</span>  </span><br><span class="line">        <span class="string">&lt;dependency&gt;</span>  </span><br><span class="line">            <span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span>  </span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span>  </span><br><span class="line">            <span class="string">&lt;version&gt;2021.1&lt;/version&gt;</span>  </span><br><span class="line">            <span class="string">&lt;type&gt;pom&lt;/type&gt;</span>  </span><br><span class="line">            <span class="string">&lt;scope&gt;import&lt;/scope&gt;</span>  </span><br><span class="line">        <span class="string">&lt;/dependency&gt;</span>  </span><br><span class="line">    <span class="string">&lt;/dependencies&gt;</span>  </span><br><span class="line"><span class="string">&lt;/dependencyManagement&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>dependencyManagement的用法：</p><ol><li>对项目所依赖jar包进行版本管理的管理器。</li><li>使用pom.xml中的dependencyManagement元索能让所有在子模块中引用一个依赖而不用显式的列出版本号。也就是子模块不需要列出版本，子模块中的pom依赖会找到dependencyManagement所在jar包的版本，并引用这个jar对应的版本号。</li><li>dependencyManagement只是声明依赖， 并不实现引入,因此子项目需要显示的声明需要用的依赖。</li><li>一般用于父工程，如果子项目中指定了版本号,那么会使用子项目中指定的jar版本。</li></ol></blockquote><h2 id="4-1-Nacos"><a href="#4-1-Nacos" class="headerlink" title="4.1 Nacos"></a>4.1 Nacos</h2><p><a href="https://nacos.io/en-us/docs/quick-start-spring-cloud.html">Quick Start for Nacos Spring Cloud Projects</a></p><h3 id="本地下载Nacos"><a href="#本地下载Nacos" class="headerlink" title="本地下载Nacos"></a>本地下载Nacos</h3><p>下载链接：<a href="../../../../img/nacos-server-1.2.1.zip">Nacos</a><br>本地启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在bin/路径下运行</span></span><br><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>启动成功截图<br><img src="/../../../../img/Pasted%20image%2020231001214320.png"><br>访问地址：<a href="http://localhost:8848/nacos">Nacos</a></p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>在子模块application.yml中添加如下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-member</span></span><br></pre></td></tr></table></figure><p>在启动类上加入注解@EnableDiscoveryClient以开启服务发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.leggasai.gulimall.member.dao&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallCouponApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GulimallCouponApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p>在pom模块中添加openFeign依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在主类中开启，添加@EnableFeignClients(basePackages &#x3D; “com.leggasai.gulimall.member.feign”)，对应你存放远程调用服务的包路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.leggasai.gulimall.member.dao&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leggasai.gulimall.member.feign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallMemberApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GulimallMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建远程调用服务文件，路径对应上述basePackages，并编写接口<br>这里的接口要和被调用类中声明的一致，包括接口路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 声明远程调用  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupon/coupon/test&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被调用类 couponController,前面有一个@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="comment">//因此接口路径为/coupon/coupon/test</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="type">CouponEntity</span> <span class="variable">couponEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponEntity</span>();  </span><br><span class="line">    couponEntity.setCouponName(<span class="string">&quot;满减200-100&quot;</span>);  </span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>, Arrays.asList(couponEntity));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用远程调用，注入远程调用服务，调用其中的接口方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>  </span><br><span class="line">CouponFeignService couponFeignService;  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> couponFeignService.test();  </span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    map.put(<span class="string">&quot;member&quot;</span>,<span class="string">&quot;jyc&quot;</span>);  </span><br><span class="line">    map.put(<span class="string">&quot;coupons&quot;</span>,r.get(<span class="string">&quot;coupons&quot;</span>));  </span><br><span class="line">    <span class="keyword">return</span> R.ok(map);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>参考文档<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md">Nacos-config-example</a><br>在pom模块中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置中心--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意新版本需要引入spring-cloud-starter-bootstrap依赖来加载bootstrap.properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建bootstrap.properties文件，不能在application.yml中写，否则不能动态生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=gulimall-coupon  </span><br><span class="line">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br></pre></td></tr></table></figure><p>打开Nacos配置中心，添加配置，Data ID必须为spring.application.name加properties<br><img src="/../../../../img/Pasted%20image%2020231003111345.png"></p><ul><li>命名空间：用来配置隔离<ul><li>默认使用public（保留空间），默认新增的所有配置都在public空间</li><li>应用：<ul><li>配置开发，测试，生产环境的不同命名空间</li><li>每一个微服务相互隔离，创建不同的命名空间</li></ul></li><li>需要使用spring.cloud.nacos.config.namespace&#x3D;id,指定对应命名控件ID</li></ul></li><li>配置集：所有配置的集合</li><li>配置集ID：Data ID</li><li>配置分组：对配置进行分组<ul><li>默认所有的配置集都属于DEFAULT_GROUP</li><li>需要使用spring.cloud.nacos.config.group指定对应的配置分组</li></ul></li></ul><p>本项目规则：</p><ul><li>每个微服务创建自己的<code>命名空间</code>，使用<code>配置分组</code>区分环境，dev、prop、test</li><li>微服务任何配置信息，任何配置文件都可以放在配置中心中</li><li>配置中心的配置会被优先使用</li></ul><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>网关是所有流量的入口，功能包括路由转发、权限校验、限流控制。本项目使用Spring Cloud Gateway作为网关。<br><a href="https://docs.spring.io/spring-cloud-gateway/docs/3.0.8/reference/html/">Spring Cloud Gateway</a></p><ol><li><p>新建gulimall-gateway模块<br><img src="/../../../../img/Pasted%20image%2020231004161619.png"></p></li><li><p>修改pom文件和根目录下的pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leggasai.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gulimall-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>API Gateway<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2020.0.1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leggasai.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开启服务的注册和发现。先在Nacos配置中心处，新建一个命名空间gateway，用于存放和gateway网关有关的配置项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=gulimall-gateway  </span><br><span class="line">spring.cloud.nacos.config.server-addr=127.0.0.1:8848  </span><br><span class="line">spring.cloud.nacos.config.namespace=6f924aa0-39f6-4a86-9be9-f13562a9af7f</span><br></pre></td></tr></table></figure></li><li><p>排除数据库相关配置。在Application.java中添加如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br></pre></td></tr></table></figure><blockquote><p>否则运行会报错<br><img src="/../../../../img/Pasted%20image%2020231004164209.png"></p></blockquote></li><li><p>添加路由规则，新建application.yml（此处为了本地调式方便，以后统一写在Nacos配置中心）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">baidu</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="5-商品服务"><a href="#5-商品服务" class="headerlink" title="5.商品服务"></a>5.商品服务</h1><h2 id="三级分类"><a href="#三级分类" class="headerlink" title="三级分类"></a>三级分类</h2><h3 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h3><blockquote><p>需要实现类似<code>京东</code>的商品分类树形结构，<code>pms_category</code>表中通过<code>cat_id</code>和<code>parent_cid</code>建立层级关系。使用递归查询构建树形结构<br><img src="/../../../../img/Pasted%20image%2020231004185021.png"></p></blockquote><p>逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CategoryServiceImpl.java</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">listWithTree</span><span class="params">()</span> &#123;  </span><br><span class="line">    List&lt;CategoryEntity&gt; entities = <span class="built_in">this</span>.baseMapper.selectList(<span class="literal">null</span>);  </span><br><span class="line">    List&lt;CategoryEntity&gt; levelOneMenus = entities.stream().filter(categoryEntity -&gt;  </span><br><span class="line">            categoryEntity.getParentCid().equals(<span class="number">0L</span>)  </span><br><span class="line">    ).map((item) -&gt; &#123;  </span><br><span class="line">        item.setChildren(getChildren(item, entities));  </span><br><span class="line">        <span class="keyword">return</span> item;  </span><br><span class="line">    &#125;).sorted((t1,t2)-&gt;&#123;  </span><br><span class="line">        <span class="keyword">return</span> (t1.getSort()==<span class="literal">null</span>?<span class="number">0</span>:t1.getSort())-(t2.getSort()==<span class="literal">null</span>?<span class="number">0</span>:t2.getSort());  </span><br><span class="line">    &#125;).collect(Collectors.toList());  </span><br><span class="line">    <span class="keyword">return</span> levelOneMenus;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> List&lt;CategoryEntity&gt; <span class="title function_">getChildren</span><span class="params">(CategoryEntity root,List&lt;CategoryEntity&gt; list)</span>&#123;  </span><br><span class="line">    List&lt;CategoryEntity&gt; children = list.stream().filter(categoryEntity -&gt;  </span><br><span class="line">            categoryEntity.getParentCid().equals(root.getCatId())  </span><br><span class="line">    ).map((item) -&gt; &#123;  </span><br><span class="line">        item.setChildren(getChildren(item, list));  </span><br><span class="line">        <span class="keyword">return</span> item;  </span><br><span class="line">    &#125;).sorted((t1,t2)-&gt;&#123;  </span><br><span class="line">        <span class="keyword">return</span> (t1.getSort()==<span class="literal">null</span>?<span class="number">0</span>:t1.getSort())-(t2.getSort()==<span class="literal">null</span>?<span class="number">0</span>:t2.getSort());  </span><br><span class="line">    &#125;).collect(Collectors.toList());  </span><br><span class="line">    <span class="keyword">return</span> children;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置网关"><a href="#配置网关" class="headerlink" title="配置网关"></a>配置网关</h3><p>先将后台管理的请求转发到网关<br>修改renren-fast-vue中static\config\index.js中的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">SITE_CONFIG</span>[<span class="string">&#x27;baseUrl&#x27;</span>] = <span class="string">&#x27;http://localhost:88/api&#x27;</span>;</span><br></pre></td></tr></table></figure><p>配置gateway的application.yml</p><blockquote><p>拦截所有<code>/api/**</code>的请求，并进行路径重写，重写为<code>/renren-fast/**</code><br>参考文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/3.0.1/reference/html/#the-rewritepath-gatewayfilter-factory">Spring Cloud Gateway</a></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">baidu</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),</span> <span class="string">/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p>成功显示验证码<br><img src="/../../../../img/Pasted%20image%2020231006155841.png"></p><h3 id="配置跨域"><a href="#配置跨域" class="headerlink" title="配置跨域"></a>配置跨域</h3><p><img src="/../../../../img/Pasted%20image%2020231006163056.png"></p><p>在gateway网关中配置跨域，添加config文件夹<br><a href="https://blog.csdn.net/weixin_45481406/article/details/127573858?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169658266316800213064076%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169658266316800213064076&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-127573858-null-null.142%5Ev94%5Einsert_down1&utm_term=springcloud%E7%BD%91%E5%85%B3%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F&spm=1018.2226.3001.4187">Spring Cloud Gateway 解决跨域问题_springcloudgateway跨域配置-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();  </span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();  </span><br><span class="line">        <span class="comment">//1.配置跨域  </span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);  </span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);  </span><br><span class="line">        corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);  </span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);  </span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单增删改查"><a href="#菜单增删改查" class="headerlink" title="菜单增删改查"></a>菜单增删改查</h3><p>配置网关路由，注意顺序，更具体的路由必须在前，否则会被<code>/api/**</code>拦截</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span>  </span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span>  </span><br><span class="line">  <span class="attr">predicates:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/api/product/**</span>  </span><br><span class="line">  <span class="attr">filters:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span>  </span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://renren-fast</span>  </span><br><span class="line">  <span class="attr">predicates:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/api/**</span>  </span><br><span class="line">  <span class="attr">filters:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),</span> <span class="string">/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p>在gulimall-product中开启服务发现</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span>  </span><br><span class="line">  <span class="attr">nacos:</span>  </span><br><span class="line">    <span class="attr">discovery:</span>  </span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">application:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">gulimall-product</span></span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><p>开启逻辑删除，配置Mybatis-plus</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span>  </span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span>  </span><br><span class="line">  <span class="attr">global-config:</span>  </span><br><span class="line">    <span class="attr">db-config:</span>  </span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span>  </span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span>  </span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果逻辑删除字段的值需要和上述全局配置不同，可以在实体类上通过注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 是否显示[0-不显示（删除），1显示（删除）]  </span></span><br><span class="line"><span class="comment"> */</span><span class="meta">@TableLogic(value = &quot;1&quot;,delval = &quot;0&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="P16安装SASS"><a href="#P16安装SASS" class="headerlink" title="P16安装SASS"></a>P16安装SASS</h2><p>先找和本地node版本对应的node-sass的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -version</span><br></pre></td></tr></table></figure><p>修改前端package.json中node-sass版本至对应的版本</p><blockquote><p>本人node为14.17.1，node-sass为4.14.1</p></blockquote><p>单独安装node-sass</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i node-sass@4.14.1 --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure><p>若执行成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>若失败,先清除node-sass缓存，再查找其他原因，可以降低node版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm rebuild node-sass</span><br><span class="line">npm uninstall node-sass</span><br></pre></td></tr></table></figure><h2 id="P46验证码加载不出"><a href="#P46验证码加载不出" class="headerlink" title="P46验证码加载不出"></a>P46验证码加载不出</h2><p>首先renren-fast不要引入common依赖，而是根据renren-fast的springboot版本单独引入对应的<code>spring-cloud-alibaba</code>并进行依赖管理。然后引入<code>spring-cloud-starter-alibaba-nacos-discovery</code>和<code>spring-cloud-loadbalancer</code>(实际发现不引入也行？)<br><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">版本说明 · alibaba&#x2F;spring-cloud-alibaba Wiki (github.com)</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--注册发现--&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SKU和SPU概念"><a href="#SKU和SPU概念" class="headerlink" title="SKU和SPU概念"></a>SKU和SPU概念</h2><blockquote><p>SPU:标准化产品单元(Standard Product Unit)，是商品信息聚合的最小单位，是一组可复用标准化信息的集合，主要也是为了在交易端对一组同类型商品做页面的聚合展示，解决的是一品多型号多规格等等多属性的问题；<br>例如：iPhone X 可以确定一个产品即为一个SPU。</p></blockquote><blockquote><p>SKU:最小的库存单位(StockKeeping Unit)，<code>sku</code>是库存存贮的最小单位，商品的进货、销售、售价、库存等最终都是打在<code>sku</code>身上的，最终的交易都决定在一个<code>sku</code>个体上；<br>例如：iPhone X 64G 银色 则是一个SKU。</p></blockquote><blockquote><p>可以理解为类和对象的关系，SPU是类&#x2F;模板，SKU是对象&#x2F;实例，有多种属性。一个SPU对应多个SKU。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Project </category>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凤凰架构笔记</title>
      <link href="/posts/c1c1f0d5/"/>
      <url>/posts/c1c1f0d5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-架构师的视角"><a href="#1-架构师的视角" class="headerlink" title="1.架构师的视角"></a>1.架构师的视角</h1><h2 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h2><ul><li>A（atomicity原子性）：在同一项业务处理过程中，事务保证了对多个数据的修改，要么同时成功，要么同时被撤销。</li><li>C（consistency一致性)：事务必须是使数据库从一个一致性状态变到另一个一致性状态。</li><li>I （isolation隔离性）：在不同的业务处理过程中，事务保证了各自业务正在读、写的数据互相独立，不会彼此影响。</li><li>D（durability持久性)：事务应当保证所有成功被提交的数据修改都能够正确地被持久化，不丢失数据。</li></ul><blockquote><p><code>原子性</code>、<code>隔离性</code>、<code>持久性</code>都是为<code>一致性</code>服务的</p></blockquote><h3 id="如何保证原子性和持久性"><a href="#如何保证原子性和持久性" class="headerlink" title="如何保证原子性和持久性"></a>如何保证原子性和持久性</h3><blockquote><p>发生崩溃的情况</p></blockquote><ul><li><strong>未提交事务，写入后崩溃</strong>：程序还没修改完三个数据，但数据库已经将其中一个或两个数据的变动写入磁盘，此时出现崩溃，一旦重启之后，数据库必须要有办法得知崩溃前发生过一次不完整的购物操作，将已经修改过的数据从磁盘中恢复成没有改过的样子，以保证原子性。(undo log)</li><li><strong>已提交事务，写入前崩溃</strong>：程序已经修改完三个数据，但数据库还未将全部三个数据的变动都写入到磁盘，此时出现崩溃，一旦重启之后，数据库必须要有办法得知崩溃前发生过一次完整的购物操作，将还没来得及写入磁盘的那部分数据重新写入，以保证持久性。（redo log）</li></ul><blockquote><p>事务提交和写入时间分类</p></blockquote><ul><li><strong>FORCE</strong>：当事务提交后，要求变动数据必须同时完成写入则称为 FORCE，如果不强制变动数据必须同时完成写入则称为 NO-FORCE。现实中绝大多数数据库采用的都是 NO-FORCE 策略，因为只要有了日志，变动数据随时可以持久化，从优化磁盘 I&#x2F;O 性能考虑，没有必要强制数据写入立即进行。</li><li><strong>STEAL</strong>：在事务提交前，允许变动数据提前写入则称为 STEAL，不允许则称为 NO-STEAL。从优化磁盘 I&#x2F;O 性能考虑，允许数据提前写入，有利于利用空闲 I&#x2F;O 资源，也有利于节省数据库缓存区的内存。</li></ul><blockquote><p>恢复崩溃时的操作</p></blockquote><ul><li><strong>分析阶段</strong>（Analysis）：该阶段从最后一次检查点（Checkpoint，可理解为在这个点之前所有应该持久化的变动都已安全落盘）开始扫描日志，找出所有没有 End Record 的事务，组成待恢复的事务集合，这个集合至少会包括 Transaction Table 和 Dirty Page Table 两个组成部分。</li><li><strong>重做阶段</strong>（Redo）：该阶段依据分析阶段中产生的待恢复的事务集合来重演历史（Repeat History），具体操作为：找出所有包含 Commit Record 的日志，将这些日志修改的数据写入磁盘，写入完成后在日志中增加一条 End Record，然后移除出待恢复事务集合。</li><li><strong>回滚阶段</strong>（Undo）：该阶段处理经过分析、重做阶段后剩余的恢复事务集合，此时剩下的都是需要回滚的事务，它们被称为 Loser，根据 Undo Log 中的信息，将已经提前写入磁盘的信息重新改写回去，以达到回滚这些 Loser 事务的目的。</li></ul><p><img src="/../../../img/Pasted%20image%2020230922180552.png"></p><h3 id="如何保证隔离性"><a href="#如何保证隔离性" class="headerlink" title="如何保证隔离性"></a>如何保证隔离性</h3><blockquote><p>现代数据库的三种锁</p></blockquote><ul><li><p><strong>写锁</strong>（Write Lock，也叫作排他锁，eXclusive Lock，简写为 X-Lock）：如果数据有加写锁，就只有持有写锁的事务才能对数据进行写入操作，数据加持着写锁时，其他事务不能写入数据，也不能施加读锁。</p></li><li><p><strong>读锁</strong>（Read Lock，也叫作共享锁，Shared Lock，简写为 S-Lock）：多个事务可以对同一个数据添加多个读锁，数据被加上读锁后就不能再被加上写锁，所以其他事务不能对该数据进行写入，但仍然可以读取。对于持有读锁的事务，如果该数据只有它自己一个事务加了读锁，允许直接将其升级为写锁，然后写入数据。</p></li><li><p><strong>范围锁</strong>（Range Lock）：对于某个范围直接加排他锁，在这个范围内的数据不能被写入(不可新增或删除)。如下语句是典型的加范围锁的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">100</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>四种隔离级别</p></blockquote><ul><li>可串行化：对所有操作加写锁，读锁，范围锁。性能差，隔离级别最高。</li><li>可重复读（幻读）：对事务所涉及的数据加读锁和写锁，且一直持有至事务结束，但不再加范围锁。<blockquote><p>注意，这里的插入操作不需要加写锁。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">100</span><span class="comment">/* 时间顺序：1，事务： T1 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> books(name,price) <span class="keyword">VALUES</span> (<span class="string">&#x27;深入理解Java虚拟机&#x27;</span>,<span class="number">90</span>)<span class="comment">/* 时间顺序：2，事务： T2 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">100</span><span class="comment">/* 时间顺序：3，事务： T1 */</span></span><br></pre></td></tr></table></figure></li><li>读已提交（幻读，不可重复读）：对事务涉及的数据加的写锁会一直持续到事务结束，但加的读锁在查询操作完成后就马上会释放。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">/* 时间顺序：1，事务： T1 立刻释放读锁，因此之后可以进行update操作*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> books <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">110</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="keyword">COMMIT</span>;<span class="comment">/* 时间顺序：2，事务： T2 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="keyword">COMMIT</span>;   <span class="comment">/* 时间顺序：3，事务： T1 */</span></span><br></pre></td></tr></table></figure></li><li>读未提交（幻读，脏读，不可重复读）：对事务涉及的数据只加写锁，会一直持续到事务结束，但完全不加读锁。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">/* 时间顺序：1，事务： T1 */</span></span><br><span class="line"><span class="comment">/* 注意没有COMMIT */</span></span><br><span class="line"><span class="keyword">UPDATE</span> books <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">90</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;<span class="comment">/* 时间顺序：2，事务： T2 */</span></span><br><span class="line"><span class="comment">/* 这条SELECT模拟购书的操作的逻辑 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">/* 时间顺序：3，事务： T1 这里不需要加读锁，因此可以在有写锁的情况下进行读操作*/</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局事务"><a href="#全局事务" class="headerlink" title="全局事务"></a>全局事务</h2><blockquote><p>在本节里，全局事务被限定为一种适用于单个服务使用多个数据源场景的事务解决方案。现在，我们对本章的<a href="http://icyfenix.cn/architect-perspective/general-architecture/transaction/">场景事例</a>做另外一种假设：如果书店的<code>用户</code>、<code>商家</code>、<code>仓库</code>分别处于不同的数据库中，其他条件仍与之前相同，那情况会发生什么变化呢？假如你平时以声明式事务来编码，那它与本地事务看起来可能没什么区别，都是标个<code>@Transactional</code>注解而已，但如果以编程式事务来实现的话，就能在写法上看出差异，伪代码如下所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(PaymentBill bill)</span> &#123;</span><br><span class="line">    userTransaction.begin();</span><br><span class="line">    warehouseTransaction.begin();</span><br><span class="line">    businessTransaction.begin();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        userAccountService.pay(bill.getMoney());</span><br><span class="line">        warehouseService.deliver(bill.getItems());</span><br><span class="line">        businessAccountService.receipt(bill.getMoney());</span><br><span class="line">        userTransaction.commit();</span><br><span class="line">        warehouseTransaction.commit();</span><br><span class="line">        businessTransaction.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        userTransaction.rollback();</span><br><span class="line">        warehouseTransaction.rollback();</span><br><span class="line">        businessTransaction.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果businessTransaction.commit()执行出错，则被异常捕获，执行rollback方法，但是此时userTransaction和warehouseTransaction已经commit(),回滚已无济于事，事务的整个一致性被破坏。</p></blockquote><h3 id="两段式提交（2pc"><a href="#两段式提交（2pc" class="headerlink" title="两段式提交（2pc)"></a>两段式提交（2pc)</h3><ul><li><strong>准备阶段</strong>：又叫作投票阶段，在这一阶段，协调者询问事务的所有参与者是否准备好提交，参与者如果已经准备好提交则回复 Prepared，否则回复 Non-Prepared。这里所说的准备操作跟人类语言中通常理解的准备并不相同，对于数据库来说，准备操作是在重做日志中记录全部事务提交操作所要做的内容，它与本地事务中真正提交的区别只是暂不写入最后一条 Commit Record 而已，这意味着在做完数据持久化后并不立即释放隔离性，即仍继续持有锁，维持数据对其他非事务内观察者的隔离状态。(指事务操作已执行，但尚未commit)</li><li><strong>提交阶段</strong>：又叫作执行阶段，协调者如果在上一阶段收到所有事务参与者回复的 Prepared 消息，则先自己在本地持久化事务状态为 Commit，&lt;注意这个时间点可能会出现网络崩溃&gt;在此操作完成后向所有参与者发送 Commit 指令，所有参与者立即执行提交操作；否则，任意一个参与者回复了 Non-Prepared 消息，或任意一个参与者超时未回复，协调者将自己的事务状态持久化为 Abort 之后，向所有参与者发送 Abort 指令，参与者立即执行回滚操作。对于数据库来说，这个阶段的提交操作应是很轻量的，仅仅是持久化一条 Commit Record 而已，通常能够快速完成，只有收到 Abort 指令时，才需要根据回滚日志清理已提交的数据，这可能是相对重负载的操作。(如果所有参与者的事务都操作成功，也就是都准备好了，则一起commit，否则全部回滚（因为此时大家都尚未commit，可以执行rollback）)</li></ul><p><img src="/../../../img/Pasted%20image%2020230922192109.png"></p><blockquote><p>两段式提交的缺陷</p></blockquote><ul><li>单点问题，协调者宕机影响全部参与者。</li><li>性能问题，整个过程涉及到两次远程服务调用，三次数据持久化</li><li>一致性风险，协调者commit后，网络崩溃，参与者无法commit</li></ul><h3 id="三段式提交（3pc）"><a href="#三段式提交（3pc）" class="headerlink" title="三段式提交（3pc）"></a>三段式提交（3pc）</h3><p>三段式提交把原本的两段式提交的准备阶段再细分为两个阶段，分别称为 CanCommit、PreCommit，把提交阶段改称为 DoCommit 阶段。其中，新增的 CanCommit 是一个询问阶段，协调者让每个参与的数据库根据自身状态，评估该事务是否有可能顺利完成。将准备阶段一分为二的理由是这个阶段是重负载的操作，一旦协调者发出开始准备的消息，每个参与者都将马上开始写重做日志，它们所涉及的数据资源即被锁住，如果此时某一个参与者宣告无法完成提交，相当于大家都白做了一轮无用功。所以，增加一轮询问阶段，如果都得到了正面的响应，那事务能够成功提交的把握就比较大了，这也意味着因某个参与者提交时发生崩溃而导致大家全部回滚的风险相对变小。因此，在事务需要回滚的场景中，三段式的性能通常是要比两段式好很多的，但在事务能够正常提交的场景中，两者的性能都依然很差，甚至三段式因为多了一次询问，还要稍微更差一些。</p><ul><li>CanCommit阶段大幅减少了二段式中准备阶段参与者可能出错的情况</li><li>参与者超时自动提交机制，解决了二段式的<code>单点问题</code></li><li>如果协调者想发送Abort指令，但网络崩溃，参与者超时后会错误的进行Commit，同样导致数据不一致。</li></ul><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h3 id="CAP和ACID"><a href="#CAP和ACID" class="headerlink" title="CAP和ACID"></a>CAP和ACID</h3><blockquote><p>在分布式系统中，涉及共享数据问题时，以下三个特征最多同时满足两个。</p></blockquote><ul><li><p><strong>一致性</strong>（<strong>C</strong>onsistency）：代表数据在任何时刻、任何分布式节点中所看到的都是符合预期的。一致性在分布式研究中是有严肃定义、有多种细分类型的概念，以后讨论分布式共识算法时，我们还会再提到一致性，那种面向副本复制的一致性与这里面向数据库状态的一致性严格来说并不完全等同，具体差别我们将在后续分布式共识算法中再作探讨。</p></li><li><p><strong>可用性</strong>（<strong>A</strong>vailability）：代表系统不间断地提供服务的能力，理解可用性要先理解与其密切相关两个指标：可靠性（Reliability）和可维护性（Serviceability）。可靠性使用平均无故障时间（Mean Time Between Failure，MTBF）来度量；可维护性使用平均可修复时间（Mean Time To Repair，MTTR）来度量。可用性衡量系统可以正常使用的时间与总时间之比，其表征为：A&#x3D;MTBF&#x2F;（MTBF+MTTR），即可用性是由可靠性和可维护性计算得出的比例值，譬如 99.9999%可用，即代表平均年故障修复时间为 32 秒。</p></li><li><p><strong>分区容忍性</strong>（<strong>P</strong>artition Tolerance）：代表分布式环境中部分节点因网络原因而彼此失联后，即与其他节点形成“网络分区”时，系统仍能正确地提供服务的能力。</p></li></ul><h3 id="强一致性和弱一致性"><a href="#强一致性和弱一致性" class="headerlink" title="强一致性和弱一致性"></a>强一致性和弱一致性</h3><ul><li>强一致性（线性一致性）：<ul><li>复制是同步的</li><li>任何一次读都能读到某个数据的最近一次写的数据。</li><li>系统中的所有进程，看到的操作顺序，都和全局时钟下的顺序一致。（简言之，在任意时刻，所有节点中的数据是一样的。）</li></ul></li><li>弱一致性（最终一致性）：<ul><li>复制是异步的</li><li>数据更新后，如果能容忍后续的访问只能访问到部分或者全部访问不到，则是弱一致性。</li><li>最终一致性就属于弱一致性。</li></ul></li><li>最终一致性：<ul><li>不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。</li><li>简单说，就是在一段时间后，节点间的数据会最终达到一致状态。</li></ul></li></ul><h3 id="柔性事务和刚性事务"><a href="#柔性事务和刚性事务" class="headerlink" title="柔性事务和刚性事务"></a>柔性事务和刚性事务</h3><ul><li>刚性事务：强一致性下的事务，常见于ACID</li><li>柔性事务：弱一致性下的事务，常见于BASE</li></ul><blockquote><p>BASE 分别是基本可用性（<strong>B</strong>asically <strong>A</strong>vailable）、柔性事务（<strong>S</strong>oft State）和最终一致性（<strong>E</strong>ventually Consistent）的缩写。</p></blockquote><h3 id="可靠事件队列"><a href="#可靠事件队列" class="headerlink" title="可靠事件队列"></a>可靠事件队列</h3><p><a href="http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html#%E5%8F%AF%E9%9D%A0%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97">分布式事务 | 凤凰架构 (icyfenix.cn)</a></p><h3 id="TCC事务"><a href="#TCC事务" class="headerlink" title="TCC事务"></a>TCC事务</h3><p><a href="http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html#%E5%8F%AF%E9%9D%A0%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97">分布式事务 | 凤凰架构 (icyfenix.cn)</a></p><h3 id="SAGA事务"><a href="#SAGA事务" class="headerlink" title="SAGA事务"></a>SAGA事务</h3><p><a href="http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html#%E5%8F%AF%E9%9D%A0%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97">分布式事务 | 凤凰架构 (icyfenix.cn)</a></p><h2 id="透明多级分流系统"><a href="#透明多级分流系统" class="headerlink" title="透明多级分流系统"></a>透明多级分流系统</h2><blockquote><p>Transparent Multilevel Cache，这一章主要是从客户端到服务端的多级缓存机制的概述。</p></blockquote><h3 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h3><h3 id="域名解析DNS系统"><a href="#域名解析DNS系统" class="headerlink" title="域名解析DNS系统"></a>域名解析DNS系统</h3><h3 id="传输链路"><a href="#传输链路" class="headerlink" title="传输链路"></a>传输链路</h3><blockquote><p>HTTP0.X、HTTP1.X、HTTP2.0的优化策略</p></blockquote><h3 id="内容分发网络"><a href="#内容分发网络" class="headerlink" title="内容分发网络"></a>内容分发网络</h3><p><img src="/../../../img/Pasted%20image%2020230923142842.png"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>调度后方的多台机器，以统一的接口对外提供服务，承担此职责的技术组件被称为“负载均衡”。</p></blockquote><ul><li>数据链路层：修改<code>数据帧</code>的目标MAC地址，服务器IP需要配置和均衡器的（虚拟）IP一致。</li></ul><p><img src="/../../../img/Pasted%20image%2020230923144216.png"></p><ul><li>网络层：方式一：IP隧道；方式二改变目标数据包</li></ul><p><img src="/../../../img/Pasted%20image%2020230923144936.png"></p><p><img src="/../../../img/Pasted%20image%2020230923144942.png"></p><hr><blockquote><p>以上四层的负载均衡都属于转发，四层之后的负载均衡模式只能代理</p></blockquote><blockquote><p>根据哪一方能感知，代理分为如下三类</p></blockquote><ul><li>正向代理（默认）：客户端可知，对服务端透明。代理服务器代替客户端与服务端通信。翻墙VPN使用了该类技术。</li></ul><p><img src="/../../../img/Pasted%20image%2020230923150821.png"></p><ul><li>反向代理（七层负载均衡属于反向代理）：服务端可知，对客户端透明。代理服务器代替服务端和客户端通信，而隐藏了真实服务端。</li></ul><p><img src="/../../../img/Pasted%20image%2020230923150807.png"></p><ul><li>透明代理：对双方都透明。</li></ul><blockquote><p>负载均衡策略</p></blockquote><ul><li>轮询均衡</li><li>权重轮询均衡</li><li>随机均衡</li><li>权重随机均衡</li><li>一致性哈希均衡</li><li>响应速度均衡</li><li>最小连接数均衡</li></ul><h3 id="服务端缓存"><a href="#服务端缓存" class="headerlink" title="服务端缓存"></a>服务端缓存</h3><blockquote><p>缓存不是越多越好，需要考虑失效、一致性、更新、安全性等</p></blockquote><h4 id="进程内缓存"><a href="#进程内缓存" class="headerlink" title="进程内缓存"></a>进程内缓存</h4><blockquote><p>有Caffeine、ConcurrentLinkedHashMap、LinkedHashMap、Guava Cache、Ehcache 和 Infinispan Embedded</p></blockquote><h4 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h4><blockquote><p>有LRU,LFU,FIFO,TinyLFU,W-TinyLFU</p></blockquote><h4 id="缓存风险"><a href="#缓存风险" class="headerlink" title="缓存风险"></a>缓存风险</h4><ul><li>缓存穿透：查询不存在的数据<ul><li>对返回为空（不存在的数据）的key进行缓存一段时间</li><li>布隆过滤器</li></ul></li><li>缓存击穿：热点数据突然失效，大量请求访问数据库<ul><li>热点数据手动管理，计划更新</li><li>加锁同步，以请求该数据的key值为锁，使得只有第一个请求可以访问真实数据源，其它的暂时阻塞。</li></ul></li><li>缓存雪崩：大量缓存同时失效<ul><li>设置随机过期事件，避免同时大批量失效。</li><li>建设分布式缓存集群，提高可用性；透明多级缓存</li></ul></li><li>缓存污染：数据不一致<ul><li>缓存更新策略。</li></ul></li></ul><h2 id="架构安全性"><a href="#架构安全性" class="headerlink" title="架构安全性"></a>架构安全性</h2><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><blockquote><p>系统如何正确分辨用户的真实身份</p></blockquote><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><blockquote><p>系统如何控制一个用户该看到哪些数据、能操作哪些功能？</p></blockquote><ul><li><strong>确保授权的过程可靠</strong>：OAuth2</li><li><strong>确保授权的结果可控</strong>：RBAC</li></ul><h4 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h4><blockquote><p><strong>谁</strong>（User）拥有什么<strong>权限</strong>（Authority）去<strong>操作</strong>（Operation）哪些<strong>资源</strong>（Resource）</p></blockquote><p><img src="/../../../img/Pasted%20image%2020230923184422.png"></p><p><img src="/../../../img/Pasted%20image%2020230923184844.png"></p><h4 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h4><blockquote><p>用<code>令牌</code>代替<code>密码</code>，用以解决第三方应用</p></blockquote><blockquote><p>为什么要用<code>令牌</code>代替<code>密码</code></p></blockquote><ul><li>密码泄露：如果第三方应用被黑客攻破，那导致授权应用或其他应用的密码同时泄露</li><li>访问范围：拥有了密码相当于拥有了账号的整个权限，不利于细粒度的访问控制。比如之对外开放查看权限，增删改权限不开放</li><li>授权回收：收回权限意味着只能修改密码，这样会导致其他使用同样密码的应用失效。<code>令牌</code>可以设置有效期，过期失效。</li></ul><p><img src="/../../../img/Pasted%20image%2020230925123746.png"></p><p>四种角色</p><ul><li>授权服务器，负责颁发 Access Token，比如微信开放平台授权服务器。</li><li>资源所有者，你的应用的用户是资源的所有者，授权其他人访问他的资源。比如微信用户是资源所有者。</li><li>调用方，调用方请求获取 Access Token，经过用户授权后，微信开放平台为其颁发 Access Token。调用方可以携带 Access Token 到资源服务器访问用户的资源。比如调用方是上文说的网站A。</li><li>资源服务器，接受 Access Token，然后验证它的被赋予的权限项目，最后返回资源。比如微信开放平台资源服务器。</li></ul><p>四种授权方式</p><ul><li>授权码模式（Authorization Code）</li><li>隐式授权模式（Implicit）</li><li>密码模式（Resource Owner Password Credentials）</li><li>客户端模式（Client Credentials）</li></ul><h5 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h5><blockquote><p>微信扫码授权功能</p></blockquote><p>授权过程：</p><ol><li>第三方应用将资源所有者（用户）导向授权服务器的授权页面，并向授权服务器提供 ClientID 及用户同意授权后的回调 URI，这是一次客户端页面转向。</li><li>授权服务器根据 ClientID 确认第三方应用的身份，用户在授权服务器中决定是否同意向该身份的应用进行授权，用户认证的过程未定义在此步骤中，在此之前应该已经完成。</li><li>如果用户同意授权，授权服务器将转向第三方应用在第 1 步调用中提供的回调 URI，并附带上一个授权码和获取令牌的地址作为参数，这是第二次客户端页面转向。</li><li>第三方应用通过回调地址收到授权码，然后将授权码与自己的 ClientSecret 一起作为参数，通过服务器向授权服务器提供的获取令牌的服务地址发起请求，换取令牌。该服务器的地址应与注册时提供的域名处于同一个域中。</li><li>授权服务器核对授权码和 ClientSecret，确认无误后，向第三方应用授予令牌。令牌可以是一个或者两个，其中必定要有的是访问令牌（Access Token），可选的是刷新令牌（Refresh Token）。访问令牌用于到资源服务器获取资源，有效期较短，刷新令牌用于在访问令牌失效后重新获取，有效期较长。</li><li>资源服务器根据访问令牌所允许的权限，向第三方应用提供资源。</li></ol><p><img src="/../../../img/Pasted%20image%2020230925125453.png"></p><p>思考的问题：</p><ol><li>第三方应用在授权服务器注册的时候需要提供一个回调地址URI，这个URI必须要和步骤1中的一致。</li><li>其他应用假冒第三方应用骗取授权<blockquote><p>其他应用没有ClientSecret换取不到令牌。令牌需要ClientID,ClientSecret(第三方应用私有)，授权码才能换取令牌。</p></blockquote></li><li>为什么先发授权码，再用授权码换取令牌<blockquote><p>授权码相当于临时令牌是给浏览器的，但授权码是暴露的。因此需要借助第三方应用的ClientSecret再去换取令牌</p></blockquote></li></ol><h5 id="隐式授权模式"><a href="#隐式授权模式" class="headerlink" title="隐式授权模式"></a>隐式授权模式</h5><blockquote><p>省略掉了通过授权码换取令牌的步骤，需要在注册时提供回调域名，此时会要求该域名与接受令牌的服务处于同一个域内。此外，同样基于安全考虑，在隐式模式中明确禁止发放刷新令牌。</p></blockquote><p><img src="/../../../img/Pasted%20image%2020230925143756.png"></p><h5 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h5><p><img src="/../../../img/Pasted%20image%2020230925143837.png"></p><blockquote><p>第三方通过用户名和密码换取令牌，但无法保障第三方不会非法保存用户的密码。</p></blockquote><h5 id="客户模式"><a href="#客户模式" class="headerlink" title="客户模式"></a>客户模式</h5><blockquote><p>该模式不需要用户同意授权，比如超时订单自动取消。<br><img src="/../../../img/Pasted%20image%2020230925144001.png"></p></blockquote><h3 id="凭证"><a href="#凭证" class="headerlink" title="凭证"></a>凭证</h3><blockquote><p>系统如何保证它与用户之间的承诺是双方当时真实意图的体现，是准确、完整且不可抵赖的？</p></blockquote><p>无状态和有状态</p><ul><li><p>无状态：各个请求对于服务器来说统一无差别处理,请求自身携带了所有服务端所需要的所有参数(服务端自身不存储跟请求相关的任何数据,不包括数据库存储信息</p></li><li><p>有状态：与之相反,有状态服务在服务端保留之前请求的信息,用以处理当前请求,比如session等</p></li></ul><h4 id="Cookie-Session"><a href="#Cookie-Session" class="headerlink" title="Cookie-Session"></a>Cookie-Session</h4><p>特点：</p><ul><li>存储在服务器，是有状态的。</li></ul><p>缺点：</p><ul><li>在分布式的情况下，水平拓展困难，根据CAP理论，无法同时满足一致性，可用性，分区容忍性</li></ul><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><p>特点：</p><ul><li>是服务端发送给客户端的，保存在客户端，每次请求随请求发送到服务器</li><li>是无状态的</li><li>由三个部分构成：</li></ul><ol><li><p>令牌头：可以被解密</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>负载：可以被解密。一般存放用户非敏感信息，过期时间等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icyfenix&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;authorities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ROLE_USER&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ROLE_ADMIN&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ALL&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1584948947</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9d77586a-3f4f-4cbb-9924-fe2f77dfa33d&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bookstore_frontend&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>签名：由于加了密钥进行加密，一般不能被破密。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(payload) <span class="punctuation">,</span> secret)</span><br></pre></td></tr></table></figure></li></ol><p>缺点：</p><ul><li><strong>令牌难以主动失效</strong></li><li><strong>相对更容易遭受重放攻击</strong></li><li><strong>相对更容易遭受重放攻击</strong></li><li><strong>必须考虑令牌在客户端如何存储</strong></li><li><strong>无状态也不总是好的</strong></li></ul><h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><p><a href="https://www.jianshu.com/p/2e20b11eb6e0">加密、摘要、签名、证书，一次说明白! - 简书 (jianshu.com)</a></p><p>安全风险类别：</p><ul><li>窃听风险：现代计算机网络建立在 TCP&#x2F;IP 协议族提供传输能力上，数据在传输线路上的每个环节都可能被窃听，从而导致敏感数据泄露；</li><li>纂改风险：数据在传输过程中可能被篡改，例如中间人攻击。攻击者可以和通信双方分别建立独立的连接，使得通信双方误以为它们正在进行一个私密连接，但察觉不到数据被篡改；(中间商)</li><li>伪装风险：攻击者可以伪装成合法的身份。</li></ul><p>实现传输安全：</p><ul><li>加密 —— 防窃听：将明文转换为密文，只有期望的接收方有能力将密文解密为明文，即使密文被攻击者窃取也无法理解数据的内容；</li><li>验证完整性 —— 防止篡改：对原始数据计算摘要，并将数据和摘要一起交付给通信对方。接收方收到后也对数据计算摘要，并比较是否和接受的摘要一致，借此判断接收的数据是否被篡改。不过，因为收到的摘要也可能被篡改，所以需要使用更安全的手段：数字签名；</li><li>认证数据来源 —— 防止伪装： 数字签名能够验证数据完整性，同时也能认证数据来源，防止伪装。</li></ul><p>摘要：摘要算法的原理是根据一定的运算规则提取原始数据中的信息，被提取的信息就是原始数据的消息摘要，也称为数据指纹。</p><ul><li>一致性： 相同数据多次计算的摘要是相同的，不同的数据（在不考虑碰撞时）的摘要是不同的；</li><li>不可逆性： 只能正向提取原始数据的摘要，无法从摘要反推出原始数据；</li><li>高效性： 摘要的生成过程高效快速；</li></ul><p>加密：加密（Encryption）是将明文（Plaintext）转换为密文（Ciphertext）的过程，只有期望的接收方有能力将密文解密为明文，即使密文被攻击者窃取也无法理解数据的内容。</p><ul><li>对称加密：加密和解密使用相同的密钥</li><li>非对称加密：加密和解密使用不同的密钥<br>1、密钥管理： 对称加密算法中需要将密钥发送给通信对方，存在密钥泄漏风险；非对称加密公钥是公开的，私钥是保密的，防止了私钥外传；</li></ul><p>2、密钥功能： 公钥加密的数据，只可使用私钥对其解密。反之，私钥加密的数据，只可使用公钥对其解密（注意：公钥加密的数据无法使用公钥解密，因为公钥是公开的，如果公钥可以解密的话，就失去了加密的安全性）；</p><p>3、计算性能： 非对称加密算法的计算效率低，因此实际中往往采用两种算法结合的复合算法：先使用非对称加密建立安全信道传输对称密钥，再使用该密钥进行对称加密；</p><p>4、认证功能： 非对称加密算法中，私钥只有一方持有，具备认证性和抗抵赖性（第 3 节 数字签名算法 应用了此特性）。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote><p>系统如何确保提交到每项服务中的数据是合乎规则的，不会对系统稳定性、数据一致性、正确性产生风险？</p></blockquote><h1 id="2-分布式的基石"><a href="#2-分布式的基石" class="headerlink" title="2.分布式的基石"></a>2.分布式的基石</h1><h2 id="分布式共识算法"><a href="#分布式共识算法" class="headerlink" title="分布式共识算法"></a>分布式共识算法</h2><h4 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h4><p>算法中的三类节点（任何节点都可以充当一下三个角色之一）</p><ul><li><strong>提案节点</strong>：称为 Proposer，提出对某个值进行设置操作的节点，设置值这个行为就被称之为<strong>提案</strong>（Proposal），值一旦设置成功，就是不会丢失也不可变的。请注意，Paxos 是典型的基于操作转移模型而非状态转移模型来设计的算法，这里的“设置值”不要类比成程序中变量赋值操作，应该类比成日志记录操作，在后面介绍的 Raft 算法中就直接把“提案”叫作“日志”了。</li><li><strong>决策节点</strong>：称为 Acceptor，是应答提案的节点，决定该提案是否可被投票、是否可被接受。提案一旦得到过半数决策节点的接受，即称该提案被<strong>批准</strong>（Accept），提案被批准即意味着该值不能再被更改，也不会丢失，且最终所有节点都会接受该它。（奇数个）</li><li><strong>记录节点</strong>：被称为 Learner，不参与提案，也不参与决策，只是单纯地从提案、决策节点中学习已经达成共识的提案，譬如少数派节点从网络分区中恢复时，将会进入这种状态。</li></ul><p><strong>Prepare</strong>阶段：提案节点广播新的提案ID(n)，决策节点收到后，做出”两个承诺“和”一个应答“，如果自己没有接收其他人的提案，则返回Promise(n,null)，如果已经接受了编号更大的提案，则返回Promise(acceptedID,acceptValue)<br><strong>Accept</strong>阶段：在该阶段，提案节点会根据决策节点的Promise来决定行为。</p><ul><li>如果上一阶段超过半数的机器回复说接受提案，那么Proposer就正式通知所有机器去生效这个操作；</li><li>如果上一阶段超过半数的机器回复说他们已经先接受了其他编号更大的提案，那么Proposer会更新一个更大的编号去重试（随机延时）；</li><li>如果上一阶段的机器回复说他们已经生效了其他编号的提案，那么Proposer就也只能接受这个其他人的提案，并告知所有机器直接接受这个新的提案；</li><li>如果上一阶段都没收到半数的机器回复，那么提案取消。</li></ul><p><img src="/../../../img/Pasted%20image%2020230925210751.png"><br><a href="https://zhuanlan.zhihu.com/p/489796705">分布式共识算法之Paxos详解 - 知乎 (zhihu.com)</a></p><h4 id="Multi-Paxos"><a href="#Multi-Paxos" class="headerlink" title="Multi Paxos"></a>Multi Paxos</h4><blockquote><p>Basic-Paxos存在“活锁”现象，如下图，则所有提案节点会不断增大自己的编号，导致陷入持续等待。</p></blockquote><p><img src="/../../../img/Pasted%20image%2020230925212641.png"></p><p>为了解决这个问题，提出了Multi-Paxos算法<br>Multi Paxos 对 Basic Paxos 的核心改进是增加了“选主”的过程，提案节点会通过定时轮询（心跳），确定当前网络中的所有节点里是否存在有一个主提案节点，一旦没有发现主节点存在，节点就会在心跳超时后使用 Basic Paxos 中定义的准备、批准的两轮网络交互过程，向所有其他节点广播自己希望竞选主节点的请求，希望整个分布式系统对“由我作为主节点”这件事情协商达成一致共识，如果得到了决策节点中多数派的批准，便宣告竞选成功。当选主完成之后，除非主节点失联之后发起重新竞选，否则从此往后，就只有主节点本身才能够提出提案。<br><img src="/../../../img/Pasted%20image%2020230925212755.png"></p><p><img src="/../../../img/Pasted%20image%2020230925212759.png"></p><h4 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h4><p>强一致性协议：Paxos、Raft、ZAB<br>最终一致性：DNS、Gossip</p><p>Gossip过程</p><ul><li><p>如果有某一项信息需要在整个网络中所有节点中传播，那从信息源开始，选择一个固定的传播周期（譬如 1 秒），随机选择它相连接的 k 个节点（称为 Fan-Out）来传播消息。</p></li><li><p>每一个节点收到消息后，如果这个消息是它之前没有收到过的，将在下一个周期内，选择除了发送消息给它的那个节点外的其他相邻 k 个节点发送相同的消息，直到最终网络中所有节点都收到了消息，尽管这个过程需要一定时间，但是理论上最终网络的所有节点都会拥有相同的消息。<br><img src="/../../../img/gossip.0eb19e80.gif"></p></li></ul><h2 id="从类库到服务"><a href="#从类库到服务" class="headerlink" title="从类库到服务"></a>从类库到服务</h2><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><hr><p>远程服务调用三要素：全限定名、端口号、服务标识<br>相关的组件：ZooKeeper、Eureka、Nacos</p><p>服务发现的步骤</p><ul><li><strong>服务的注册</strong>（Service Registration）：当服务启动的时候，它应该通过某些形式（如调用 API、产生事件消息、在 ZooKeeper&#x2F;Etcd 的指定位置记录、存入数据库，等等）将自己的坐标信息通知到<code>服务注册中心</code>，这个过程可能由应用程序本身来完成，称为自注册模式，譬如 Spring Cloud 的@EnableEurekaClient 注解；也可能由容器编排框架或第三方注册工具来完成，称为第三方注册模式，譬如 Kubernetes 和 Registrator。</li><li><strong>服务的维护</strong>（Service Maintaining）：尽管服务发现框架通常都有提供下线机制，但并没有什么办法保证每次服务都能<a href="https://whatis.techtarget.com/definition/graceful-shutdown-and-hard-shutdown">优雅地下线</a>（Graceful Shutdown）而不是由于宕机、断网等原因突然失联。所以服务发现框架必须要自己去保证所维护的服务列表的正确性，以避免告知消费者服务的坐标后，得到的服务却不能使用的尴尬情况。现在的服务发现框架，往往都能支持多种协议（HTTP、TCP 等）、多种方式（长连接、心跳、探针、进程状态等）去监控服务是否健康存活，将不健康的服务自动从服务注册表中剔除。</li><li><strong>服务的发现</strong>（Service Discovery）：这里的发现是特指狭义上消费者从服务发现框架中，把一个符号（譬如 Eureka 中的 ServiceID、Nacos 中的服务名、或者通用的 FQDN）转换为服务实际坐标的过程，这个过程现在一般是通过 HTTP API 请求或者通过 DNS Lookup 操作来完成，也还有一些相对少用的方式，譬如 Kubernetes 也支持注入环境变量来做服务发现。</li></ul><h4 id="注册中心实现"><a href="#注册中心实现" class="headerlink" title="注册中心实现"></a>注册中心实现</h4><hr><ul><li>在分布式 K&#x2F;V 存储框架上自己开发的服务发现，这类的代表是 ZooKeeper、Doozerd、Etcd。</li><li>以基础设施（主要是指 DNS 服务器）来实现服务发现，这类的代表是 SkyDNS、CoreDNS。</li><li>专门用于服务发现的框架和工具，这类的代表是 Eureka、Consul 和 Nacos。</li></ul><h3 id="网关路由"><a href="#网关路由" class="headerlink" title="网关路由"></a>网关路由</h3><p>网关 &#x3D; 路由器（基础职能） + 过滤器（可选职能）</p><p>网络IO模型<br>两类五种</p><p>两类是指同步 I&#x2F;O与异步 I&#x2F;O，五种是指在同步 IO 中又分有划分出阻塞 I&#x2F;O、非阻塞 I&#x2F;O、多路复用 I&#x2F;O和信号驱动 I&#x2F;O四种细分模型。</p><ul><li><strong>异步 I&#x2F;O</strong>（Asynchronous I&#x2F;O）：好比你在美团外卖订了个盒饭，付款之后你自己该干嘛还干嘛去，饭做好了骑手自然会到门口打电话通知你。异步 I&#x2F;O 中数据到达缓冲区后，不需要由调用进程主动进行从缓冲区复制数据的操作，而是复制完成后由操作系统向线程发送信号，所以它一定是非阻塞的。</li><li><strong>同步 I&#x2F;O</strong>（Synchronous I&#x2F;O）：好比你自己去饭堂打饭，这时可能有如下情形发生：<ul><li><strong>阻塞 I&#x2F;O</strong>（Blocking I&#x2F;O）：你去到饭堂，发现饭还没做好，你也干不了别的，只能打个瞌睡（线程休眠），直到饭做好，这就是被阻塞了。阻塞 I&#x2F;O 是最直观的 I&#x2F;O 模型，逻辑清晰，也比较节省 CPU 资源，但缺点就是线程休眠所带来的上下文切换，这是一种需要切换到内核态的重负载操作，不应当频繁进行。</li><li><strong>非阻塞 I&#x2F;O</strong>（Non-Blocking I&#x2F;O）：你去到饭堂，发现饭还没做好，你就回去了，然后每隔 3 分钟来一次饭堂看饭做好了没，直到饭做好。非阻塞 I&#x2F;O 能够避免线程休眠，对于一些很快就能返回结果的请求，非阻塞 I&#x2F;O 可以节省切换上下文切换的消耗，但是对于较长时间才能返回的请求，非阻塞 I&#x2F;O 反而白白浪费了 CPU 资源，所以目前并不常用。</li><li><strong>多路复用 I&#x2F;O</strong>（Multiplexing I&#x2F;O）：多路复用 I&#x2F;O 本质上是阻塞 I&#x2F;O 的一种，但是它的好处是可以在同一条阻塞线程上处理多个不同端口的监听。类比的情景是你名字叫雷锋，代表整个宿舍去饭堂打饭，去到饭堂，发现饭还没做好，还是继续打瞌睡，但哪个舍友的饭好了，你就马上把那份饭送回去，然后继续打着瞌睡哼着歌等待其他的饭做好。多路复用 I&#x2F;O 是目前的高并发网络应用的主流，它下面还可以细分 select、epoll、kqueue 等不同实现，这里就不作展开了。</li><li><strong>信号驱动 I&#x2F;O</strong>（Signal-Driven I&#x2F;O）：你去到饭堂，发现饭还没做好，但你跟厨师熟，跟他说饭做好了叫你，然后回去该干嘛干嘛，等收到厨师通知后，你把饭从饭堂拿回宿舍。这里厨师的通知就是那个“信号”，信号驱动 I&#x2F;O 与异步 I&#x2F;O 的区别是“从缓冲区获取数据”这个步骤的处理，前者收到的通知是可以开始进行复制操作了，即要你自己从饭堂拿回宿舍，在复制完成之前线程处于阻塞状态，所以它仍属于同步 I&#x2F;O 操作，而后者收到的通知是复制操作已经完成，即外卖小哥已经把饭送到了。</li></ul></li></ul><h3 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h3><p><strong>案例场景：</strong></p><p>假设你身处广东，要上 Fenix’s Bookstore 购买一本书，在程序业务逻辑里，购书其中一个关键步骤是调用商品出库服务来完成货物准备，在代码中该服务的调用请求为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATCH https://warehouse:8080/restful/stockpile/3</span><br><span class="line"></span><br><span class="line">&#123;amount: -1&#125;</span><br></pre></td></tr></table></figure><p>又假设 Fenix’s Bookstore 是个大书店，在北京、武汉、广州的机房均部署有服务集群，你的购物请求从浏览器发出后，服务端按顺序发生了如下事件：</p><ol><li><p>首先是将<code>warehouse</code>这个服务名称转换为恰当的服务地址，“恰当”是个宽泛的描述，一种典型的“恰当”便是因调用请求来自广东，优先分配给传输距离最短的广州机房来应答。其实按常理来说这次出库服务的调用应该是集群内的流量，而不是用户浏览器直接发出的请求，所以尽管结果没有不同，但更接近实际的的情况是用户访问首页时已经被 DNS 服务器分配到了广州机房，请求出库服务时，应优先选择同机房的服务进行调用，此时请求变为：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATCH https://guangzhou-ip-wan:8080/restful/stockpile/3</span><br></pre></td></tr></table></figure></li><li><p>广州机房的服务网关将该请求与配置中的特征进行比对，由 URL 中的<code>/restful/stockpile/**</code>得知该请求访问的是商品出库服务，因此，将请求的 IP 地址转换为内网中 warehouse 服务集群的入口地址：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATCH https://warehouse-gz-lan:8080/restful/stockpile/3</span><br></pre></td></tr></table></figure></li><li><p>集群中部署有多个 warehouse 服务，收到调用请求后，负载均衡器要在多个服务中根据某种标准——可能是随机挑选，也可能是按顺序轮询，抑或是选择此前调用次数最少那个，等等。根据均衡策略找出要响应本次调用的服务，称其为<code>warehouse-gz-lan-node1</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATCH https://warehouse-gz-lan-node1:8080/restful/stockpile/3</span><br></pre></td></tr></table></figure></li><li><p>如果访问<code>warehouse-gz-lan-node1</code>服务，没有返回需要的结果，而是抛出 500 错。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 500 Internal Server Error</span><br></pre></td></tr></table></figure></li><li><p>根据预置的<a href="http://icyfenix.cn/distribution/traffic-management/failure.html">故障转移</a>（Failover）策略，重试将调用分配给能够提供该服务的其他节点，称其为<code>warehouse-gz-lan-node2</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATCH https://warehouse-gz-lan-node2:8080/restful/stockpile/3</span><br></pre></td></tr></table></figure></li><li><p><code>warehouse-gz-lan-node2</code>服务返回商品出库成功。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure></li></ol><p>以上过程从整体上看，步骤 1、2、3、5，分别对应了<strong>服务发现</strong>、<strong>网关路由</strong>、<strong>负载均衡</strong>和<strong>服务容错</strong></p><h4 id="客户端负载均衡器"><a href="#客户端负载均衡器" class="headerlink" title="客户端负载均衡器"></a>客户端负载均衡器</h4><p>访问请求是由集群内部的某个服务发起，由集群内部的另一个服务进行响应的。一种全新的、独立位于每个服务前端的、分散式的负载均衡方式正逐渐变得流行起来，这就是本节我们要讨论的主角：客户端负载均衡器。<br><img src="/../../../img/Pasted%20image%2020230927092158.png"></p><ul><li>客户端均衡器是和服务实例一一对应的，与服务实例在同一个进程之内。</li><li>均衡器与服务之间信息交换是进程内的方法调用，不存在任何额外的网络开销。</li></ul><ul><li>不依赖集群边缘的设施，所有内部流量都仅在服务集群的内部循环，避免了出现前文那样，集群内部流量要“绕场一周”的尴尬局面。</li><li>分散式的均衡器意味着天然避免了集中式的单点问题，它的带宽资源将不会像集中式均衡器那样敏感，这在以七层均衡器为主流、不能通过 IP 隧道和三角传输这样方式节省带宽的微服务环境中显得更具优势。</li><li>客户端均衡器要更加灵活，能够针对每一个服务实例单独设置均衡策略等参数，访问某个服务，是不是需要具备亲和性，选择服务的策略是随机、轮询、加权还是最小连接等等，都可以单独设置而不影响其它服务。</li></ul><p>缺点：</p><ul><li>同一个进程，意味着难以进行技术异构，使用同一语言开发。</li><li>共用一个进程，均衡器的稳定性会直接影响整个服务进程的稳定性，同样消耗资源。</li><li>内部网络安全性</li><li>服务集群的拓扑关系动态变化，则客户端负载均衡器需要一直轮询服务注册中心。</li></ul><h4 id="代理负载均衡器"><a href="#代理负载均衡器" class="headerlink" title="代理负载均衡器"></a>代理负载均衡器</h4><p>使用<code>边车代理</code>模式，不是进程内通信，通过网络进行</p><p><img src="/../../../img/Pasted%20image%2020230927092651.png"><br>优点：</p><ul><li>支持了技术异构，独立于服务进程的均衡器也不会由于自身的稳定性影响到服务进程的稳定。</li><li>在服务拓扑感知方面代理均衡器也要更有优势。由于边车代理接受控制平面的统一管理，当服务节点拓扑关系发生变化时，控制平面就会主动向边车代理发送更新服务清单的控制指令，这避免了此前客户端均衡器必须长期主动轮询服务注册中心所造成的浪费。</li><li>在安全性、可观测性上，由于边车代理都是一致的实现，有利于在服务间建立双向 TLS 通信，也有利于对整个调用链路给出更详细的统计信息。</li></ul><h4 id="地域与区域"><a href="#地域与区域" class="headerlink" title="地域与区域"></a>地域与区域</h4><ul><li>Region：<strong>地域</strong>，如华北，华东，华南。大型系统就是通过不同地域的机房来缩短用户与服务器之间的物理距离。不同地域之间通过公众互联网连接，而不是内网，服务发现、负载均衡器默认不支持跨地域的服务发现和负载均衡。</li><li>Zone：<strong>区域</strong>，位于同一<strong>地域</strong>，如在华东的上海、杭州、苏州的不同机房，使用不同的电力系统和网络系统。同一个区域使用内网连接。</li></ul><h2 id="流量治理"><a href="#流量治理" class="headerlink" title="流量治理"></a>流量治理</h2><blockquote><p>容错性设计是微服务中的核心概念，通过服务容错和流量控制等解决方案来尽可能避免。</p></blockquote><h3 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h3><h4 id="容错策略"><a href="#容错策略" class="headerlink" title="容错策略"></a>容错策略</h4><ul><li>故障转移：服务有多个副本，失败则切换到其他副本尝试，但有次数上限，不会无限制重试。</li><li>快速失败：非幂等性服务，需要避免重复调用导致脏数据，如扣款。因此直接返回失败。</li><li>安全失败：服务有主次之分，如拓展点、事件、AOP注入的日志、调试、审计等功能，假如这些不影响主业务的服务失败了，则主业务应当正确返回，次服务记录一次出错日志即可。</li><li>沉默失败：若大量服务超时，会导致线程堆积。这种情况就应该先隔离该服务，避免对其他服务的影响。</li><li>故障恢复：一般是快速失败+故障恢复。它是指当服务调用出错了以后，将该次调用失败的信息存入一个消息队列中，然后由系统自动开始异步重试调用。很显然也是幂等性服务，由于是后台异步重试，适合实时性不高的主路逻辑或旁路逻辑。</li><li>并行调用：获得最大成功率，双重保险策略。向多个服务副本发送请求，任何一个返回成功即可。（感觉这个也需要幂等服务）</li><li>广播调用：与并行调用相对，指的是等所有请求都成功，才返回。适用于“刷新分布式缓存”。</li></ul><table><thead><tr><th>容错策略</th><th>优点</th><th>缺点</th><th>应用场景</th></tr></thead><tbody><tr><td><strong>故障转移</strong></td><td>系统自动处理，调用者对失败的信息不可见</td><td>增加调用时间，额外的资源开销</td><td>调用幂等服务  <br>对调用时间不敏感的场景</td></tr><tr><td><strong>快速失败</strong></td><td>调用者有对失败的处理完全控制权  <br>不依赖服务的幂等性</td><td>调用者必须正确处理失败逻辑，如果一味只是对外抛异常，容易引起雪崩</td><td>调用非幂等的服务  <br>超时阈值较低的场景</td></tr><tr><td><strong>安全失败</strong></td><td>不影响主路逻辑</td><td>只适用于旁路调用</td><td>调用链中的旁路服务</td></tr><tr><td><strong>沉默失败</strong></td><td>控制错误不影响全局</td><td>出错的地方将在一段时间内不可用</td><td>频繁超时的服务</td></tr><tr><td><strong>故障恢复</strong></td><td>调用失败后自动重试，也不影响主路逻辑</td><td>重试任务可能产生堆积，重试仍然可能失败</td><td>调用链中的旁路服务  <br>对实时性要求不高的主路逻辑也可以使用</td></tr><tr><td><strong>并行调用</strong></td><td>尽可能在最短时间内获得最高的成功率</td><td>额外消耗机器资源，大部分调用可能都是无用功</td><td>资源充足且对失败容忍度低的场景</td></tr><tr><td><strong>广播调用</strong></td><td>支持同时对批量的服务提供者发起调用</td><td>资源消耗大，失败概率高</td><td>只适用于批量操作的场景</td></tr></tbody></table><h4 id="容错设计模式"><a href="#容错设计模式" class="headerlink" title="容错设计模式"></a>容错设计模式</h4><hr><p><strong>断路器模式</strong>：设置一个计数器，当服务失败次数达到阈值时，拒绝后续所有服务，直接返回失败，以避免雪崩效应。（<code>服务熔断</code>）<br><img src="/../../../img/Pasted%20image%2020230929101833.png"></p><p>断路器是有限状态机：</p><ul><li>Closed：关闭状态，意味着所有服务会被正常执行和返回。是<strong>初始状态</strong></li><li>Open：开启状态，拦截服务，直接返回失败，实现快速失败。</li><li>Half Open：中间状态，表示自动故障修复能力，当断路器处于<code>Open</code>状态一段时间后，将由下一次请求将其触发为<code>Half Open</code>状态，如果调用成功则恢复至<code>Closed</code>状态，否则继续保持<code>Open</code></li></ul><p><img src="/../../../img/Pasted%20image%2020230929102237.png"></p><p>阈值说明：</p><ul><li>一段时间内（10s），请求数量达到设定阈值（如20个），必须达到某个值，不然无需断路器介入。</li><li>一段时间内（10s），i请求的故障率达到设定阈值（50%），故障率较高，则说明需要断路器。</li></ul><p><strong>舱壁隔离模式</strong><br>舱壁隔离模式是常用的实现服务隔离的设计模式，舱壁这个词是来自造船业的舶来品，它原本的意思是设计舰船时，要在每个区域设计独立的水密舱室，一旦某个舱室进水，也只是影响这个舱室中的货物，而不至于让整艘舰艇沉没。这种思想就很符合容错策略中<code>失败静默</code>策略。</p><p>若系统中服务A发送了超时，由于目前主流的网络访问大多是基于 TPR 并发模型（Thread per Request）来实现的，因此该请求会一直占用该线程。一旦达到例如Tomcat的最大全局线程数量，则所有其他服务也会因为没有空余的线程服务而导致不可用，产生雪崩。</p><p>因此，可以为每个服务单独的设置线程池，如每个服务设置5个最大线程数，这样该服务超时，最多阻塞5条线程数，不会导致别的服务也没法用。但局部线程池会增大CPU的开销，导致增加3-10ms的请求处理时间。可以进一步采用信号量机制取代局部线程池，为每个服务设置一个线程安全的计数器即可。</p><p><strong>重试模式</strong><br><code>故障转移</code>和<code>故障恢复</code>策略都需要对服务进行重复调用，差别是这些重复调用有可能是同步的，也可能是后台异步进行；有可能会重复调用同一个服务，也可能会调用到服务的其他副本。无论具体是通过怎样的方式调用、调用的服务实例是否相同，都可以归结为重试设计模式的应用范畴。适用于有可能自己恢复的临时性失灵，网络抖动，临时过载等。</p><ul><li>仅主路逻辑的关键服务进行同步重试。</li><li>仅对瞬时故障到的失败（可根据状态码判断），即可自愈的服务。</li><li>仅对幂等性服务重试。</li><li>必须有终止条件。<ul><li>超时终止，避免无限期等待</li><li>次数终止，最多重试2-5次，不可以无限次重试。</li></ul></li></ul><h2 id="可靠通讯"><a href="#可靠通讯" class="headerlink" title="可靠通讯"></a>可靠通讯</h2><h3 id="零信任网络"><a href="#零信任网络" class="headerlink" title="零信任网络"></a>零信任网络</h3><p>表 9-1 传统网络安全模型与云原生时代零信任模型对比</p><table><thead><tr><th>传统、边界安全模型</th><th>云原生、零信任安全模型</th><th>具体需求</th></tr></thead><tbody><tr><td>基于防火墙等设施，认为边界内可信</td><td>服务到服务通信需认证，环境内的服务之间默认没有信任</td><td>保护网络边界（仍然有效）；服务之间默认没有互信</td></tr><tr><td>用于特定的 IP 和硬件（机器）</td><td>资源利用率、重用、共享更好，包括 IP 和硬件</td><td>受信任的机器运行来源已知的代码</td></tr><tr><td>基于 IP 的身份</td><td>基于服务的身份</td><td>同上</td></tr><tr><td>服务运行在已知的、可预期的服务器上</td><td>服务可运行在环境中的任何地方，包括私有云&#x2F;公有云混合部署</td><td>同上</td></tr><tr><td>安全相关的需求由应用来实现，每个应用单独实现</td><td>由基础设施来实现，基础设施中集成了共享的安全性要求。</td><td>集中策略实施点（Choke Points），一致地应用到所有服务</td></tr><tr><td>对服务如何构建、评审、实施的安全需求的约束力较弱</td><td>安全相关的需求一致地应用到所有服务</td><td>同上</td></tr><tr><td>安全组件的可观测性较弱</td><td>有安全策略及其是否生效的全局视图</td><td>同上</td></tr><tr><td>发布不标准，发布频率较低</td><td>标准化的构建和发布流程，每个微服务变更独立，变更更频繁</td><td>简单、自动、标准化的变更发布流程</td></tr><tr><td>工作负载通常作为虚拟机部署或部署到物理主机，并使用物理机或管理程序进行隔离</td><td>封装的工作负载及其进程在共享的操作系统中运行，并有管理平台提供的某种机制来进行隔离</td><td>在共享的操作系统的工作负载之间进行隔离</td></tr></tbody></table><h3 id="服务安全"><a href="#服务安全" class="headerlink" title="服务安全"></a>服务安全</h3><h4 id="建立信任"><a href="#建立信任" class="headerlink" title="建立信任"></a>建立信任</h4><p>零信任网络不存在默认的信任关系，只可通过权威公证人：公开密钥基础设施PKI。通过PKI构建传输安全层（TLS）。在零信任网络安全中，常常使用双向TSL认证。</p><ul><li><p><strong>单向 TLS 认证</strong>：只需要服务端提供证书，客户端通过服务端证书验证服务器的身份，但服务器并不验证客户端的身份。单向 TLS 用于公开的服务，即任何客户端都被允许连接到服务进行访问，它保护的重点是客户端免遭冒牌服务器的欺骗。</p></li><li><p><strong>双向 TLS 认证</strong>：客户端、服务端双方都要提供证书，双方各自通过对方提供的证书来验证对方的身份。双向 TLS 用于私密的服务，即服务只允许特定身份的客户端访问，它除了保护客户端不连接到冒牌服务器外，也保护服务端不遭到非法用户的越权访问。</p></li></ul><h4 id="认证-1"><a href="#认证-1" class="headerlink" title="认证"></a>认证</h4><p>参考Spring Security</p><h4 id="授权-1"><a href="#授权-1" class="headerlink" title="授权"></a>授权</h4><blockquote><p>谁拥有什么权限，RBAC模型</p></blockquote><p>在Spring Security中可以通过两种方式配置，一种是在配置类中，另一种是通过注解标明到方法体上</p><h2 id="可观测性"><a href="#可观测性" class="headerlink" title="可观测性"></a>可观测性</h2><blockquote><p>学术界一般会将可观测性分解为三个更具体方向进行研究，分别是：事件日志、链路追踪和聚合度量</p></blockquote><p><img src="/../../../img/Pasted%20image%2020230929121530.png"></p><ul><li>日志（Logging）：记录事件，分析出程序的行为，譬如曾经调用过什么方法，曾经操作过哪些数据，等等。</li><li>追踪（Tracing）：全链路追踪，追踪的主要目的是排查故障，如分析调用链的哪一部分、哪个方法出现错误或阻塞，输入输出是否符合预期。</li><li>度量（Metrics）：对系统中某一类信息的统计聚合。度量的主要目的是监控（Monitoring）和预警（Alert），如某些度量指标达到风险阈值时触发事件，以便自动处理或者提醒管理员介入。</li></ul><h3 id="事件日志"><a href="#事件日志" class="headerlink" title="事件日志"></a>事件日志</h3><ul><li><strong>避免打印敏感信息</strong>。</li><li><strong>避免引用慢操作</strong>。</li><li><strong>避免打印追踪诊断信息</strong></li><li><strong>避免误导他人</strong></li><li><strong>记录请求时的TraceID</strong></li><li><strong>系统运行过程中的关键事件</strong></li><li><strong>启动时输出配置信息</strong></li></ul><table><thead><tr><th>数据项</th><th>值</th></tr></thead><tbody><tr><td>IP</td><td>14.123.255.234</td></tr><tr><td>Username</td><td>null</td></tr><tr><td>Datetime</td><td>19&#x2F;Feb&#x2F;2020:00:12:11 +0800</td></tr><tr><td>Method</td><td>GET</td></tr><tr><td>URL</td><td>&#x2F;index.html</td></tr><tr><td>Protocol</td><td>HTTP&#x2F;1.1</td></tr><tr><td>Status</td><td>200</td></tr><tr><td>Size</td><td>1314</td></tr><tr><td>Refer</td><td><a href="https://icyfenix.cn/">https://icyfenix.cn</a></td></tr><tr><td>Agent</td><td>Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.163 Safari&#x2F;537.36</td></tr></tbody></table><h3 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h3><h3 id="聚合度量"><a href="#聚合度量" class="headerlink" title="聚合度量"></a>聚合度量</h3><h4 id="指标收集"><a href="#指标收集" class="headerlink" title="指标收集"></a>指标收集</h4><ul><li><strong>计数度量器</strong>（Counter）：这是最好理解也是最常用的指标形式，计数器就是对有相同量纲、可加减数值的合计量，譬如业务指标像销售额、货物库存量、职工人数等等；技术指标像服务调用次数、网站访问人数等都属于计数器指标。</li><li><strong>瞬态度量器</strong>（Gauge）：瞬态度量器比计数器更简单，它就表示某个指标在某个时点的数值，连加减统计都不需要。譬如当前 Java 虚拟机堆内存的使用量，这就是一个瞬态度量器；又譬如，网站访问人数是计数器，而网站在线人数则是瞬态度量器。</li><li><strong>吞吐率度量器</strong>（Meter）：吞吐率度量器顾名思义是用于统计单位时间的吞吐量，即单位时间内某个事件的发生次数。譬如交易系统中常以 TPS 衡量事务吞吐率，即每秒发生了多少笔事务交易；又譬如港口的货运吞吐率常以“吨&#x2F;每天”为单位计算，10 万吨&#x2F;天的港口通常要比 1 万吨&#x2F;天的港口的货运规模更大。</li><li><strong>直方图度量器</strong>（Histogram）：直方图是常见的二维统计图，它的两个坐标分别是统计样本和该样本对应的某个属性的度量，以长条图的形式表示具体数值。譬如经济报告中要衡量某个地区历年的 GDP 变化情况，常会以 GDP 为纵坐标，时间为横坐标构成直方图来呈现。</li><li><strong>采样点分位图度量器</strong>（Quantile Summary）：分位图是统计学中通过比较各分位数的分布情况的工具，用于验证实际值与理论值的差距，评估理论值与实际值之间的拟合度。譬如，我们说“高考成绩一般符合正态分布”，这句话的意思是：高考成绩高低分的人数都较少，中等成绩的较多，将人数按不同分数段统计，得出的统计结果一般能够与正态分布的曲线较好地拟合。</li><li>除了以上常见的度量器之外，还有 Timer、Set、Fast Compass、Cluster Histogram 等其他各种度量器，采用不同的度量系统，支持度量器类型的范围肯定会有差别，譬如 Prometheus 支持了上面提到五种度量器中的 Counter、Gauge、Histogram 和 Summary 四种。</li></ul><p>表 10-2 常用 Exporter</p><table><thead><tr><th>范围</th><th>常用 Exporter</th></tr></thead><tbody><tr><td>数据库</td><td>MySQL Exporter、Redis Exporter、MongoDB Exporter、MSSQL Exporter 等</td></tr><tr><td>硬件</td><td>Apcupsd Exporter，IoT Edison Exporter， IPMI Exporter、Node Exporter 等</td></tr><tr><td>消息队列</td><td>Beanstalkd Exporter、Kafka Exporter、NSQ Exporter、RabbitMQ Exporter 等</td></tr><tr><td>存储</td><td>Ceph Exporter、Gluster Exporter、HDFS Exporter、ScaleIO Exporter 等</td></tr><tr><td>HTTP 服务</td><td>Apache Exporter、HAProxy Exporter、Nginx Exporter 等</td></tr><tr><td>API 服务</td><td>AWS ECS Exporter， Docker Cloud Exporter、Docker Hub Exporter、GitHub Exporter 等</td></tr><tr><td>日志</td><td>Fluentd Exporter、Grok Exporter 等</td></tr><tr><td>监控系统</td><td>Collectd Exporter、Graphite Exporter、InfluxDB Exporter、Nagios Exporter、SNMP Exporter 等</td></tr><tr><td>其它</td><td>Blockbox Exporter、JIRA Exporter、Jenkins Exporter， Confluence Exporter 等</td></tr></tbody></table><h4 id="存储查询"><a href="#存储查询" class="headerlink" title="存储查询"></a>存储查询</h4><blockquote><p>避免日志过于庞大，引入<code>时序数据库</code>。</p></blockquote><ul><li>以<a href="https://en.wikipedia.org/wiki/Log-structured_merge-tree">日志结构的合并树</a>（Log Structured Merge Tree，LSM-Tree）代替传统关系型数据库中的<a href="https://en.wikipedia.org/wiki/B%2B_tree">B+Tree</a>作为存储结构，LSM 适合的应用场景就是写多读少，且几乎不删改的数据。</li><li>设置激进的数据保留策略，譬如根据过期时间（TTL）自动删除相关数据以节省存储空间，同时提高查询性能。对于普通数据库来说，数据会存储一段时间后就会被自动删除这种事情是不可想象的。</li><li>对数据进行再采样（Resampling）以节省空间，譬如最近几天的数据可能需要精确到秒，而查询一个月前的数据时，只需要精确到天，查询一年前的数据时，只要精确到周就够了，这样将数据重新采样汇总就可以极大节省存储空间。</li></ul><h4 id="监控预警"><a href="#监控预警" class="headerlink" title="监控预警"></a>监控预警</h4>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 微服务和分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 软件架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite</title>
      <link href="/posts/feaf56e8/"/>
      <url>/posts/feaf56e8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><blockquote><p>Vite是一种新型前端构建工具(类似webpack)，能够显著提升前端开发体验。它主要由两部分组成：</p></blockquote><ul><li>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。</li><li>一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ul><h2 id="搭建第一个Vite项目"><a href="#搭建第一个Vite项目" class="headerlink" title="搭建第一个Vite项目"></a>搭建第一个Vite项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br><span class="line">npm create vite@latest my-vue-app -- --template &lt;template_name&gt;</span><br><span class="line"></span><br><span class="line">yarn create vite</span><br><span class="line">yarn create vite my-vue-app --template &lt;template_name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">template_name可以是</span></span><br><span class="line">vanilla，vanilla-ts, vue, vue-ts，react，react-ts，react-swc，react-swc-ts，preact，preact-ts，lit，lit-ts，svelte，svelte-ts，solid，solid-ts，qwik，qwik-ts</span><br></pre></td></tr></table></figure><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// https://cn.vitejs.dev/config/#resolve-alias</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="comment">// 设置路径</span></span><br><span class="line">      <span class="string">&#x27;~&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./&#x27;</span>),</span><br><span class="line">      <span class="comment">// 设置别名</span></span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// https://cn.vitejs.dev/config/#resolve-extensions</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.mjs&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>WebStorm路径标红解决方案<br>在tsconfig.json中添加如下代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;baseUrl&quot;: &quot;.&quot;,  </span><br><span class="line">&quot;paths&quot;: &#123;  </span><br><span class="line">  &quot;@/*&quot;: [&quot;src/*&quot;]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2016-2019 人人开源 All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * https://www.renren.io</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 版权所有，侵权必究！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.leggasai.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RRException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(msg);</span><br><span class="line"><span class="built_in">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg, Throwable e)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(msg, e);</span><br><span class="line"><span class="built_in">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg, <span class="type">int</span> code)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(msg);</span><br><span class="line"><span class="built_in">this</span>.msg = msg;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg, <span class="type">int</span> code, Throwable e)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(msg, e);</span><br><span class="line"><span class="built_in">this</span>.msg = msg;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = hello;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="/posts/69e6bbe1/"/>
      <url>/posts/69e6bbe1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-元素概念"><a href="#1-元素概念" class="headerlink" title="1.元素概念"></a>1.元素概念</h1><p><img src="/../../../img/Pasted%20image%2020230919203517.png"></p><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><blockquote><p>分布式系统架构思想下，将复杂系统拆分为多个独立的子模块，例如微服务模块。此时就需要考虑子模块间的远程通信，典型的通信模式分为以下两种，一种是同步的RPC远程调用；一种是基于中间件代理的异步通信方式。</p></blockquote><h3 id="同步RPC调用模型"><a href="#同步RPC调用模型" class="headerlink" title="同步RPC调用模型"></a>同步RPC调用模型</h3><p><img src="/../../../img/Pasted%20image%2020230919203701.png"></p><blockquote><p>同步RPC调用模型下，不同系统之间直接进行调用通信，每个请求直接从调用方发送到被调用方，然后要求被调用方立即返回响应结果给调用方，以确定本次调用结果是否成功。 <strong>注意</strong> 此处的同步并不代表RPC的编程接口方式，RPC也可以有异步非阻塞调用的编程方式，但本质上仍然是需要在指定时间内得到目标端的直接响应</p></blockquote><h3 id="异步通信模型"><a href="#异步通信模型" class="headerlink" title="异步通信模型"></a>异步通信模型</h3><p><img src="/../../../img/Pasted%20image%2020230919203730.png"></p><blockquote><p>异步消息通信模式下，各子系统之间无需强耦合直接连接，调用方只需要将请求转化成异步事件（消息）发送给中间代理，发送成功即可认为该异步链路调用完成，剩下的工作中间代理会负责将事件可靠通知到下游的调用系统，确保任务执行完成。该中间代理一般就是消息中间件。</p></blockquote><blockquote><p>异步通信的优势如下：</p></blockquote><ul><li><p>系统拓扑简单。由于调用方和被调用方统一和中间代理通信，系统是星型结构，易于维护和管理。</p></li><li><p>上下游耦合性弱。上下游系统之间弱耦合，结构更灵活，由中间代理负责缓冲和异步恢复。 上下游系统间可以独立升级和变更，不会互相影响。</p></li><li><p>容量削峰填谷。基于消息的中间代理往往具备很强的流量缓冲和整形能力，业务流量高峰到来时不会击垮下游。</p></li></ul><h2 id="消息传输模型介绍"><a href="#消息传输模型介绍" class="headerlink" title="消息传输模型介绍"></a>消息传输模型介绍</h2><blockquote><p>主流的消息中间件的传输模型主要为点对点模型和发布订阅模型。</p></blockquote><h3 id="点对点模型"><a href="#点对点模型" class="headerlink" title="点对点模型"></a>点对点模型</h3><p><img src="/../../../img/Pasted%20image%2020230919203903.png"><br>点对点模型也叫队列模型，具有如下特点：</p><ul><li><p>消费匿名：消息上下游沟通的唯一的身份就是队列，下游消费者从队列获取消息无法申明独立身份。</p></li><li><p>一对一通信：基于消费匿名特点，下游消费者即使有多个，但都没有自己独立的身份，因此共享队列中的消息，每一条消息都只会被唯一一个消费者处理。因此点对点模型只能实现一对一通信。</p></li></ul><h3 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h3><p><img src="/../../../img/Pasted%20image%2020230919203925.png"><br>发布订阅模型具有如下特点：</p><ul><li><p>消费独立：相比队列模型的匿名消费方式，发布订阅模型中消费方都会具备的身份，一般叫做订阅组（订阅关系），不同订阅组之间相互独立不会相互影响。</p></li><li><p>一对多通信：基于独立身份的设计，同一个主题内的消息可以被多个订阅组处理，每个订阅组都可以拿到全量消息。因此发布订阅模型可以实现一对多通信。</p></li></ul><p>传输模型对比</p><p>点对点模型和发布订阅模型各有优势，点对点模型更为简单，而发布订阅模型的扩展性更高。 Apache RocketMQ 使用的传输模型为发布订阅模型，因此也具有发布订阅模型的特点。</p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/posts/6f2612a2/"/>
      <url>/posts/6f2612a2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常用注解"><a href="#1-常用注解" class="headerlink" title="1.常用注解"></a>1.常用注解</h1><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><blockquote><p>Spring的@Bean注解用于告诉方法，产生一个<code>Bean</code>对象，然后这个<code>Bean</code>对象交给<code>Spring</code>管理。产生这个<code>Bean</code>对象的方法<code>Spring</code>只会调用一次，随后这个<code>Spring</code>将会将这个<code>Bean</code>对象放在自己的<code>IOC容器</code>中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router</title>
      <link href="/posts/49bed910/"/>
      <url>/posts/49bed910/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><blockquote><p>用 Vue + Vue Router 创建单页应用非常简单：通过 Vue.js，我们已经用组件组成了我们的应用。当加入 Vue Router 时，我们需要做的就是将我们的组件映射到路由上，让 Vue Router 知道在哪里渲染它们。下面是一个基本的例子：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 router-link 组件进行导航 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过传递 `to` 来指定链接 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-动态路由匹配"><a href="#2-动态路由匹配" class="headerlink" title="2.动态路由匹配"></a>2.动态路由匹配</h1><table><thead><tr><th>匹配模式</th><th>匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td>&#x2F;users&#x2F;:username</td><td>&#x2F;users&#x2F;eduardo</td><td><code>&#123; username: &#39;eduardo&#39; &#125;</code></td></tr><tr><td>&#x2F;users&#x2F;:username&#x2F;posts&#x2F;:postId</td><td>&#x2F;users&#x2F;eduardo&#x2F;posts&#x2F;123</td><td><code>&#123; username: &#39;eduardo&#39;, postId: &#39;123&#39; &#125;</code></td></tr></tbody></table><h2 id="响应路由参数变化"><a href="#响应路由参数变化" class="headerlink" title="响应路由参数变化"></a>响应路由参数变化</h2><blockquote><p>使用带有参数的路由时需要注意的是，当用户从 &#x2F;users&#x2F;johnny 导航到 &#x2F;users&#x2F;jolyne 时，相同的组件实例将被重复使用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会被调用。</p></blockquote><blockquote><p>方式一：使用watch监控参数<br>方式二：使用导航守卫<strong>beforeRouteUpdate</strong></p></blockquote><h2 id="捕获所有路由（用于404）"><a href="#捕获所有路由（用于404）" class="headerlink" title="捕获所有路由（用于404）"></a>捕获所有路由（用于404）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;NotFound&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFound</span> &#125;,</span><br><span class="line">  <span class="comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/user-:afterUser(.*)&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserGeneric</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="在参数中自定义正则"><a href="#在参数中自定义正则" class="headerlink" title="在参数中自定义正则"></a>在参数中自定义正则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// /:orderId -&gt; 仅匹配数字</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:orderId(\\d+)&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// /:productName -&gt; 匹配其他任何内容</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:productName&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>确保**转义反斜杠( <code>\</code> )**，就像我们对 <code>\d</code> (变成<code>\\d</code>)所做的那样，在 JavaScript 中实际传递字符串中的反斜杠字符。</p></blockquote><h2 id="可重复的参数"><a href="#可重复的参数" class="headerlink" title="可重复的参数"></a>可重复的参数</h2><blockquote><p>如果你需要匹配具有多个部分的路由，如 &#x2F;first&#x2F;second&#x2F;third，你应该用 *（0 个或多个）和 +（1 个或多个）将参数标记为可重复：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// /:chapters -&gt;  匹配 /one, /one/two, /one/two/three, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:chapters+&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// /:chapters -&gt; 匹配 /, /one, /one/two, /one/two/three, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:chapters*&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">//这些也可以通过在右括号后添加它们与自定义正则结合使用：</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 仅匹配数字</span></span><br><span class="line">  <span class="comment">// 匹配 /1, /1/2, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:chapters(\\d+)+&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// 匹配 /, /1, /1/2, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:chapters(\\d+)*&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Sensitive-与-strict-路由配置"><a href="#Sensitive-与-strict-路由配置" class="headerlink" title="Sensitive 与 strict 路由配置"></a>Sensitive 与 strict 路由配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 将匹配 /users/posva 而非：</span></span><br><span class="line">    <span class="comment">// - /users/posva/ 当 strict: true</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// - /Users/posva 当 sensitive: true</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">sensitive</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="comment">// 将匹配 /users, /Users, 以及 /users/42 而非 /users/ 或 /users/42/</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id?&#x27;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>, <span class="comment">// applies to all routes</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><blockquote><p>你也可以通过使用 ? 修饰符(0 个或 1 个)将一个参数标记为可选：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 匹配 /users 和 /users/posva</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:userId?&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// 匹配 /users 和 /users/42</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:userId(\\d+)?&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="3-嵌套路由"><a href="#3-嵌套路由" class="headerlink" title="3.嵌套路由"></a>3.嵌套路由</h1><blockquote><p>这里的 <code>&lt;router-view&gt;</code> 是一个顶层的 <code>router-view</code>。它渲染顶层路由匹配的组件。同样地，一个被渲染的组件也可以包含自己嵌套的 <code>&lt;router-view&gt;</code>。例如，如果我们在 <code>User</code> 组件的模板内添加一个 <code>&lt;router-view&gt;</code>：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功</span></span><br><span class="line">        <span class="comment">// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">        <span class="comment">// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserPosts</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>这里子路由中一定不要加&#x2F;，如&#x2F;profile</p></blockquote><h1 id="4-编程式导航"><a href="#4-编程式导航" class="headerlink" title="4.编程式导航"></a>4.编程式导航</h1><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象,路由的index中需要用占位符 /users/:username</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path ：</p></blockquote><blockquote><p>当指定 <code>params</code> 时，可提供 <code>string</code> 或 <code>number</code> 参数（或者对于<a href="https://router.vuejs.org/zh/guide/essentials/route-matching-syntax.html#repeatable-params">可重复的参数</a>可提供一个数组）。<strong>任何其他类型（如 <code>undefined</code>、<code>false</code> 等）都将被自动字符串化</strong>。对于<a href="https://router.vuejs.org/zh/guide/essentials/route-matching-syntax.html#repeatable-params">可选参数</a>，你可以提供一个空字符串（<code>&quot;&quot;</code>）来跳过它。</p></blockquote><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><blockquote><p>它的作用类似于 <code>router.push</code>，唯一不同的是，它在导航时不会向 history 添加新记录，正如它的名字所暗示的那样——它取代了当前的条目。此时点击浏览器的返回按钮，不可以返回到先前的网页，因为被替换了</p></blockquote><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><p>也可以直接在传递给 <code>router.push</code> 的 <code>routeLocation</code> 中增加一个属性 <code>replace: true</code> ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">router.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="前进"><a href="#前进" class="headerlink" title="前进"></a>前进</h2><blockquote><p>该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步，类似于 <code>window.history.go(n)</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向前移动一条记录，与 router.forward() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 返回一条记录，与 router.back() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 前进 3 条记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 如果没有那么多记录，静默失败</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>)</span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="5-命名视图"><a href="#5-命名视图" class="headerlink" title="5.命名视图"></a>5.命名视图</h1><blockquote><p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 <code>sidebar</code> (侧导航) 和 <code>main</code> (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 <code>router-view</code> 没有设置名字，那么默认为 <code>default</code>。其实就是一个组件里展示多个路由组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view left-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LeftSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view main-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view right-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RightSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 <code>components</code> 配置 (带上 <strong>s</strong>)：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Home</span>,</span><br><span class="line">        <span class="comment">// LeftSidebar: LeftSidebar 的缩写</span></span><br><span class="line">        <span class="title class_">LeftSidebar</span>,</span><br><span class="line">        <span class="comment">// 它们与 `&lt;router-view&gt;` 上的 `name` 属性匹配</span></span><br><span class="line">        <span class="title class_">RightSidebar</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="6-重定向"><a href="#6-重定向" class="headerlink" title="6.重定向"></a>6.重定向</h1><blockquote><p>重定向也是通过 <code>routes</code> 配置来完成，下面例子是从 &#96;&#96; 重定向到 <code>/index</code>：这样用户打开首页时，就会自动跳转到<code>/index</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/index&#x27;</span> &#125;]</span><br></pre></td></tr></table></figure><blockquote><p>重定向的目标也可以是一个命名的路由：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;homepage&#x27;</span> &#125; &#125;]</span><br></pre></td></tr></table></figure><blockquote><p>甚至是一个方法，动态返回重定向目标：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// /search/screens -&gt; /search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/search/:searchText&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的字符串路径/路径对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">q</span>: to.<span class="property">params</span>.<span class="property">searchText</span> &#125; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="相对重定向"><a href="#相对重定向" class="headerlink" title="相对重定向"></a>相对重定向</h2><blockquote><p>也可以重定向到相对位置：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将总是把/users/123/posts重定向到/users/123/profile。</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 该函数接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// 相对位置不以`/`开头</span></span><br><span class="line">      <span class="comment">// 或 &#123; path: &#x27;profile&#x27;&#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;profile&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><blockquote><p>重定向是指当用户访问 &#x2F;home 时，URL 会被 &#x2F; 替换，然后匹配成 &#x2F;。那么什么是别名呢？将 &#x2F; 别名为 &#x2F;home，意味着当用户访问 &#x2F;home 时，URL 仍然是 &#x2F;home，但会被匹配为用户正在访问 &#x2F;。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Homepage</span>, <span class="attr">alias</span>: <span class="string">&#x27;/home&#x27;</span> &#125;]</span><br></pre></td></tr></table></figure><blockquote><p>通过别名，你可以自由地将 UI 结构映射到一个任意的 URL，而不受配置的嵌套结构的限制。使别名以 <code>/</code> 开头，以使嵌套路径中的路径成为绝对路径。你甚至可以将两者结合起来，用一个数组提供多个别名：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UsersLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 为这 3 个 URL 呈现 UserList</span></span><br><span class="line">      <span class="comment">// - /users</span></span><br><span class="line">      <span class="comment">// - /users/list</span></span><br><span class="line">      <span class="comment">// - /people</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserList</span>, <span class="attr">alias</span>: [<span class="string">&#x27;/people&#x27;</span>, <span class="string">&#x27;list&#x27;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="7-路由组件传参"><a href="#7-路由组件传参" class="headerlink" title="7.路由组件传参"></a>7.路由组件传参</h1><blockquote><p>在你的组件中使用 <code>$route</code> 会与路由紧密耦合，这限制了组件的灵活性，因为它只能用于特定的 URL。虽然这不一定是件坏事，但我们可以通过 <code>props</code> 配置来解除这种行为：</p></blockquote><p>我们可以将下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;]</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="comment">// 请确保添加一个与路由参数完全相同的 prop 名</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;]</span><br></pre></td></tr></table></figure><h2 id="布尔模式"><a href="#布尔模式" class="headerlink" title="布尔模式"></a>布尔模式</h2><blockquote><p>当 props 设置为 true 时，route.params 将被设置为组件的 props。</p></blockquote><h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><blockquote><p>对于有命名视图的路由，你必须为每个命名视图定义 props 配置：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="attr">default</span>: <span class="title class_">User</span>, <span class="attr">sidebar</span>: <span class="title class_">Sidebar</span> &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123; <span class="attr">default</span>: <span class="literal">true</span>, <span class="attr">sidebar</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="对象模式"><a href="#对象模式" class="headerlink" title="对象模式"></a>对象模式</h2><blockquote><p>当 props 是一个对象时，它将原样设置为组件 props。当 props 是静态的时候很有用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;jyc&quot;</span>,<span class="attr">age</span>:<span class="string">&quot;16&quot;</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User组件声明属性</span></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="函数模式"><a href="#函数模式" class="headerlink" title="函数模式"></a>函数模式</h2><blockquote><p>你可以创建一个返回 props 的函数。这允许你将参数转换为其他类型，将静态值与基于路由的值相结合等等。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line"><span class="attr">props</span>: <span class="function"><span class="params">route</span>=&gt;</span>(&#123;<span class="attr">name</span>:route.<span class="property">query</span>.<span class="property">name</span>,<span class="attr">age</span>:route.<span class="property">query</span>.<span class="property">age</span>&#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User组件</span></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><blockquote><p>URL <code>/users/1?name=jyc&amp;age=16</code> 将传递 <code>&#123;name: &#39;jyc&#39;,age:&#39;16&#39;&#125;</code> 作为 props 传给 <code>User</code> 组件。</p></blockquote><h1 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h1><p>（todo)</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia</title>
      <link href="/posts/74dce755/"/>
      <url>/posts/74dce755/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者使用 npm</span></span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><blockquote><p>在vue项目中，一般会在src下建立&#x2F;store文件夹，用以存放全局状态文件。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;  </span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createPinia</span>();  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line"><span class="comment">//------------------------------------------------</span></span><br><span class="line"><span class="comment">//或直接在main.ts中引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br></pre></td></tr></table></figure><h1 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2.核心概念"></a>2.核心概念</h1><h2 id="1-State"><a href="#1-State" class="headerlink" title="1.State"></a>1.State</h2><blockquote><p>大多数时候，state 是 store 的核心部分。 我们通常从定义应用程序的状态开始。 在 Pinia 中，状态被定义为返回初始状态的函数。 Pinia 在服务器端和客户端都可以工作。(其实也就是全局共享的数据，如登录用户信息)</p></blockquote><h3 id="定义State"><a href="#定义State" class="headerlink" title="定义State"></a>定义State</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 推荐使用 完整类型推断的箭头函数</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 所有这些属性都将自动推断其类型</span></span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span>,</span><br><span class="line">      <span class="attr">isAdmin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 推荐使用 完整类型推断的箭头函数</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="comment">// 所有这些属性都将自动推断其类型</span></span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span>,</span><br><span class="line">      <span class="attr">isAdmin</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>当你在箭头函数中使用大括号 {} 包围代码块时，你必须显式使用 return 语句来指定返回值。这是因为大括号 {} 可以包含多个语句，因此你需要明确指定哪个语句的结果应该作为函数的返回值。<br>所以，如果你写成 f: () &#x3D;&gt; { return {} }，这与 f: () &#x3D;&gt; ({}) 是等价的，都表示函数 f 返回一个空对象。在这种情况下，大括号 {} 包含了一个 return 语句，指定了返回值为空对象。如果你省略大括号，那么箭头函数将默认将后面的表达式作为返回值。</p></blockquote><h3 id="访问State"><a href="#访问State" class="headerlink" title="访问State"></a>访问State</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useStore&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/module/user&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line"><span class="comment">//访问状态中的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="property">counter</span>)</span><br><span class="line"><span class="comment">//重置到初始状态</span></span><br><span class="line">store.$reset()</span><br></pre></td></tr></table></figure><blockquote><p>注意store类型是一个reactive包裹的响应式对象</p></blockquote><blockquote><p><strong>为了从 Store 中提取属性同时保持其响应式，您需要使用storeToRefs()或者使用计算属性。 它将为任何响应式属性创建 refs。 当您仅使用 store 中的状态但不调用任何操作时，这很有用：</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">    <span class="comment">// `name` 和 `doubleCount` 是响应式引用</span></span><br><span class="line">    <span class="comment">// 这也会为插件添加的属性创建引用</span></span><br><span class="line">    <span class="comment">// 但跳过任何 action 或 非响应式（不是 ref/reactive）的属性</span></span><br><span class="line">    <span class="keyword">const</span> &#123; name, doubleCount &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"><span class="comment">//doubleValue: computed(() =&gt; store.doubleCount),</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">      doubleCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="修改状态"><a href="#修改状态" class="headerlink" title="修改状态"></a>修改状态</h3><h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">counter</span>++;</span><br></pre></td></tr></table></figure><h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要重新赋一个新的值，不利于数组，集合的增删修改</span></span><br><span class="line">store.$patch(&#123;</span><br><span class="line">  <span class="attr">counter</span>: store.<span class="property">counter</span> + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Abalam&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数形式，对state进行修改</span></span><br><span class="line">store.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">items</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;shoes&#x27;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  state.<span class="property">hasChanged</span> = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接修改state</span></span><br><span class="line">store.<span class="property">$state</span> = &#123; <span class="attr">counter</span>: <span class="number">666</span>, <span class="attr">name</span>: <span class="string">&#x27;Paimon&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="订阅状态"><a href="#订阅状态" class="headerlink" title="订阅状态"></a>订阅状态</h3><blockquote><p>订阅状态的变化，每当状态被修改或改变时，都会触发回调函数</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cartStore.$subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// import &#123; MutationType &#125; from &#x27;pinia&#x27;</span></span><br><span class="line">  mutation.<span class="property">type</span> <span class="comment">// &#x27;direct&#x27; 方式1| &#x27;patch object&#x27; 方式2(1)| &#x27;patch function&#x27; 方式2(2)</span></span><br><span class="line">  <span class="comment">// 与 cartStore.$id 相同</span></span><br><span class="line">  mutation.<span class="property">storeId</span> <span class="comment">// &#x27;cart&#x27;</span></span><br><span class="line">  <span class="comment">// 仅适用于 mutation.type === &#x27;patch object&#x27;</span></span><br><span class="line">  mutation.<span class="property">payload</span> <span class="comment">// 补丁对象传递给 to cartStore.$patch()</span></span><br><span class="line">  <span class="comment">// 每当它发生变化时，将整个状态持久化到本地存储</span></span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;cart&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-Getters"><a href="#2-Getters" class="headerlink" title="2.Getters"></a>2.Getters</h2><blockquote><p>Getter 完全等同于 Store 状态的 <strong>计算值</strong>。 它们可以用 defineStore() 中的 getters 属性定义。 他们接收“状态”作为第一个参数以鼓励箭头函数的使用：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 自动将返回类型推断为数字</span></span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">counter</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 返回类型必须明确设置</span></span><br><span class="line">    <span class="title function_">doublePlusOne</span>(): number &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">counter</span> * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 访问其他getters</span></span><br><span class="line">    <span class="title function_">doubleCountPlusOne</span>():number &#123;</span><br><span class="line">      <span class="comment">// 自动完成 ✨</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 传递参数给getters</span></span><br><span class="line">    <span class="comment">// getters本身和计算属性一样，无法接收参数，但可以返回一个接收参数的函数。如下面的getUserById</span></span><br><span class="line">    <span class="attr">getUserById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">userId</span>) =&gt;</span> state.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">id</span> === userId)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 访问其他Store的getters</span></span><br><span class="line">    <span class="comment">// 首先需要在顶部import其他Store</span></span><br><span class="line">    <span class="comment">// import &#123;useOtherStore&#125; from &#x27;./other-store&#x27;</span></span><br><span class="line">    <span class="title function_">getOtherStore</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> otherStore = <span class="title function_">useOtherStore</span>()</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">count</span> + otherStore.<span class="property">count</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>可以直接访问Store的任何getter作为store的属性，就和state属性一样</p></blockquote><h2 id="3-Actions"><a href="#3-Actions" class="headerlink" title="3.Actions"></a>3.Actions</h2><blockquote><p>Actions 相当于组件中的 <strong>methods</strong>。 它们可以使用 defineStore() 中的 actions 属性定义，并且它们非常适合定义业务逻辑：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ol><li>和getters一样，在actions同样可以访问其他Store</li><li>可以定义异步方法</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useAuthStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth-store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useSettingsStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;settings&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchUserPreferences</span>(<span class="params">preferences</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> auth = <span class="title function_">useAuthStore</span>()</span><br><span class="line">      <span class="keyword">if</span> (auth.<span class="property">isAuthenticated</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">preferences</span> = <span class="keyword">await</span> <span class="title function_">fetchPreferences</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;User must be authenticated&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="订阅Actions"><a href="#订阅Actions" class="headerlink" title="订阅Actions"></a>订阅Actions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unsubscribe = someStore.$onAction(</span><br><span class="line">  <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    name, // action 的名字</span></span></span><br><span class="line"><span class="params"><span class="function">    store, // store 实例</span></span></span><br><span class="line"><span class="params"><span class="function">    args, // 调用这个 action 的参数</span></span></span><br><span class="line"><span class="params"><span class="function">    after, // 在这个 action 执行完毕之后，执行这个函数</span></span></span><br><span class="line"><span class="params"><span class="function">    onError, // 在这个 action 抛出异常的时候，执行这个函数</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始的时间变量</span></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="comment">// 这将在 `store` 上的操作执行之前触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Start &quot;<span class="subst">$&#123;name&#125;</span>&quot; with params [<span class="subst">$&#123;args.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>].`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 action 成功并且完全运行后，after 将触发。</span></span><br><span class="line">    <span class="comment">// 它将等待任何返回的 promise</span></span><br><span class="line">    <span class="title function_">after</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">`Finished &quot;<span class="subst">$&#123;name&#125;</span>&quot; after <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">          <span class="built_in">Date</span>.now() - startTime</span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span>ms.\nResult: <span class="subst">$&#123;result&#125;</span>.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 action 抛出或返回 Promise.reject ，onError 将触发</span></span><br><span class="line">    <span class="title function_">onError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`Failed &quot;<span class="subst">$&#123;name&#125;</span>&quot; after <span class="subst">$&#123;<span class="built_in">Date</span>.now() - startTime&#125;</span>ms.\nError: <span class="subst">$&#123;error&#125;</span>.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动移除订阅</span></span><br><span class="line"><span class="title function_">unsubscribe</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian基本使用</title>
      <link href="/posts/a7d785f0/"/>
      <url>/posts/a7d785f0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-字体"><a href="#1-字体" class="headerlink" title="1.字体"></a>1.字体</h1><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><p>使用**&lt; content &gt;**</p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>使用*&lt; content &gt;*<br>使用_&lt; content &gt;_</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>123</del></p><hr><h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>123</li><li>123</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>123<ol><li>123</li><li>456</li></ol></li><li>456</li><li>789</li></ol><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><ul><li><input disabled="" type="checkbox"> todo1</li><li><input checked="" disabled="" type="checkbox"> todo2</li></ul><hr><h1 id="3-格式"><a href="#3-格式" class="headerlink" title="3.格式"></a>3.格式</h1><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><blockquote><p>我是引用块1<br>我是引用块2<br>我是引用块3</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>标题1</th><th>标题2</th></tr></thead><tbody><tr><td>行1列1</td><td>行1列2</td></tr><tr><td>行2列1</td><td>行2列2</td></tr></tbody></table><h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h1><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>![[Pasted image 20230911213917.png]]</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>#写作<br>#写作&#x2F;记叙文<br>#写作&#x2F;议论文</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>[[引用]]</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
